<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>StringBuilder on 风吹过的烟花</title>
    <link>https://zhangxiaofeng05.github.io/tags/stringbuilder/</link>
    <description>Recent content in StringBuilder on 风吹过的烟花</description>
    <image>
      <title>风吹过的烟花</title>
      <url>https://zhangxiaofeng05.github.io/images/papermod-cover.png</url>
      <link>https://zhangxiaofeng05.github.io/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.146.6</generator>
    <language>en</language>
    <lastBuildDate>Wed, 24 Jul 2019 15:38:18 +0800</lastBuildDate>
    <atom:link href="https://zhangxiaofeng05.github.io/tags/stringbuilder/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>String、StringBuffer、StringBuilder的区别</title>
      <link>https://zhangxiaofeng05.github.io/posts/string-stringbuffer-stringbuilder/</link>
      <pubDate>Wed, 24 Jul 2019 15:38:18 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/string-stringbuffer-stringbuilder/</guid>
      <description>&lt;h2 id=&#34;长度是否可变&#34;&gt;长度是否可变&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;String 是被 final 修饰的，他的长度是不可变的，就算调用 String 的concat 方法，那也是把字符串拼接起来并重新创建一个对象，把拼接后的 String 的值赋给新创建的对象&lt;/li&gt;
&lt;li&gt;StringBuffer 和 StringBuilder修改本身&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;执行效率&#34;&gt;执行效率&lt;/h2&gt;
&lt;p&gt;三者在执行速度方面的比较：StringBuilder &amp;gt; StringBuffer &amp;gt; String&lt;/p&gt;
&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果要操作少量的数据用 = String&lt;/li&gt;
&lt;li&gt;单线程操作字符串缓冲区 下操作大量数据 = StringBuilder&lt;/li&gt;
&lt;li&gt;多线程操作字符串缓冲区 下操作大量数据 = StringBuffer&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;线程安全&#34;&gt;线程安全&lt;/h2&gt;
&lt;p&gt;StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问），StringBuffer是线程安全的。只是StringBuffer 中的方法大都采用了 &lt;code&gt;synchronized&lt;/code&gt; 关键字进行修饰，因此是线程安全的，而 StringBuilder 没有这个修饰，可以被认为是线程不安全的。&lt;/p&gt;
&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/AmyZheng/p/9415064.html&#34;&gt;https://www.cnblogs.com/AmyZheng/p/9415064.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
