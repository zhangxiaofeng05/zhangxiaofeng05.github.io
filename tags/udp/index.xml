<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>UDP on 风吹过的烟花</title>
    <link>https://zhangxiaofeng05.github.io/tags/udp/</link>
    <description>Recent content in UDP on 风吹过的烟花</description>
    <image>
      <title>风吹过的烟花</title>
      <url>https://zhangxiaofeng05.github.io/images/papermod-cover.png</url>
      <link>https://zhangxiaofeng05.github.io/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.146.6</generator>
    <language>en</language>
    <lastBuildDate>Tue, 30 Jul 2019 16:10:55 +0800</lastBuildDate>
    <atom:link href="https://zhangxiaofeng05.github.io/tags/udp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TCP、UDP简单聊天</title>
      <link>https://zhangxiaofeng05.github.io/posts/java-simple-chat/</link>
      <pubDate>Tue, 30 Jul 2019 16:10:55 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/java-simple-chat/</guid>
      <description>&lt;h1 id=&#34;tcp&#34;&gt;TCP&lt;/h1&gt;
&lt;p&gt;客户端套接字：Socket
服务端套接字：ServerSocket
TCP（传输控制协议）一种基于连接的通信协议。可靠传输&lt;/p&gt;
&lt;h2 id=&#34;server&#34;&gt;Server&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package com.tcp;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;

/**
 * 服务器端
 */
public class Server {
    public static void main(String[] args) {
        ServerSocket serverSocket = null;
        try {
            serverSocket = new ServerSocket(12345);
            System.out.println(&amp;#34;服务启动：&amp;#34;+serverSocket.getInetAddress().getHostAddress()+&amp;#34;:&amp;#34;+serverSocket.getLocalPort());
            Socket accept = serverSocket.accept();
            System.out.println(&amp;#34;客户端：&amp;#34;+accept.getInetAddress().getHostAddress()+&amp;#34;:&amp;#34;+accept.getLocalPort());
            BufferedReader sis = new BufferedReader(new InputStreamReader(System.in));
            BufferedReader is = new BufferedReader(new InputStreamReader(accept.getInputStream()));
            PrintWriter os = new PrintWriter(new OutputStreamWriter(accept.getOutputStream()));
            while (true){
                String line;
                if ((line=is.readLine())!=null){
                    System.out.println(&amp;#34;收到客户端：&amp;#34;+line);
                    if (line.equals(&amp;#34;bye&amp;#34;)){
                        break;
                    }else {
                        os.println(sis.readLine());
                        os.flush();
                    }
                }
            }
            is.close();
            os.close();
            accept.close();
        } catch (IOException e) {
            e.printStackTrace();
        }finally {
            try {
                serverSocket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;client&#34;&gt;Client&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package com.tcp;

import java.io.*;
import java.net.Socket;

/**
 * 客户端
 */
public class Client {
    public static void main(String[] args) {
        try {
            Socket socket = new Socket(&amp;#34;127.0.0.1&amp;#34;,12345);
            BufferedReader sis = new BufferedReader(new InputStreamReader(System.in));
            BufferedReader is = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            PrintWriter os = new PrintWriter(new OutputStreamWriter(socket.getOutputStream()));
            String line;
            while (true){
                if ((line=sis.readLine())!=null){
                    if (&amp;#34;bye&amp;#34;.equals(line)){
                        System.exit(0);
                    }
                    os.println(line);
                    os.flush();
                }
                String readLine = is.readLine();
                System.out.println(&amp;#34;收到服务端：&amp;#34;+readLine);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;udp&#34;&gt;UDP&lt;/h1&gt;
&lt;p&gt;UDP采用Datagram（数据报）传输，数据包是一种尽力而为的传送数据的方式，它只是 把数据的目的地记录在数据包中，然后就直接放在网络上，系统不保证数据是否能安全到达，或者什么时候可以送到，它并不保证传送质量。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
