<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Interface on 风吹过的烟花</title>
    <link>https://zhangxiaofeng05.github.io/tags/interface/</link>
    <description>Recent content in Interface on 风吹过的烟花</description>
    <image>
      <title>风吹过的烟花</title>
      <url>https://zhangxiaofeng05.github.io/images/papermod-cover.png</url>
      <link>https://zhangxiaofeng05.github.io/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.146.6</generator>
    <language>en</language>
    <lastBuildDate>Sat, 17 Aug 2019 23:20:11 +0800</lastBuildDate>
    <atom:link href="https://zhangxiaofeng05.github.io/tags/interface/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>java接口回调</title>
      <link>https://zhangxiaofeng05.github.io/posts/interface-callback/</link>
      <pubDate>Sat, 17 Aug 2019 23:20:11 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/interface-callback/</guid>
      <description>&lt;p&gt;回调一般用于层间协作，上层将本层函数安装在下层，这个函数就是回调，而下层在一定条件下触发回调。例如作为一个驱动，是一个底层，他在收到一个数据时，除了完成本层的处理工作外，还将进行回调，将这个数据交给上层应用层来做进一步处理，这在分层的数据通信中很普遍。&lt;/p&gt;
&lt;p&gt;例如老板A对员工B说，我现在交给你一个任务，并且我把我的电话号码给你，你一旦完成任务就给我打电话。&lt;/p&gt;
&lt;p&gt;1.创建一个回调接口&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/**
 * 一个回调接口
 */
public interface CallBack {
    public void doEvent();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.创建回调接口的实现类，此例中，员工干完活后还要干什么事情是老板说了算的。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/**
 * 回调接口的实现类
 */
public class Boss implements CallBack{

    @Override
    public void doEvent() {
        System.out.println(&amp;#34;打电话给老板，告知已完成工作了&amp;#34;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3.创建控制类，也就是本例中的员工对象，他要持有老板的地址(即回调接口)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/**
 * 控制类，也就是本例中的员工对象，他要持有老板的地址(即回调接口)
 */
public class Employee {
    CallBack callBack;
    public Employee(CallBack callBack){
        this.callBack=callBack;
    }

    public void doWork(){
        System.out.println(&amp;#34;玩命干活中&amp;#34;);
        callBack.doEvent();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4.测试类&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/**
 * 测试类
 */
public class TestMain {
    public static void main(String[] args) {
        Employee employee = new Employee(new Boss());
        employee.doWork();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行结果：&lt;/p&gt;</description>
    </item>
    <item>
      <title>什么是面向接口编程</title>
      <link>https://zhangxiaofeng05.github.io/posts/interface-oriented-programming/</link>
      <pubDate>Mon, 15 Jul 2019 21:29:10 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/interface-oriented-programming/</guid>
      <description>&lt;h1 id=&#34;面向接口编程&#34;&gt;面向接口编程&lt;/h1&gt;
&lt;p&gt;要正确地使用Java语言进行面向对象的编程，从而提高程序的复用性，增加程序的可维护性、可扩展性，就必须是面向接口的编程。面向接口的编程就意味着：开发系统时，主体构架使用接口，接口构成系统的骨架。这样就可以通过更换实现接口的类来更换系统的实现。&lt;/p&gt;
&lt;h1 id=&#34;示例&#34;&gt;示例&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public interface Person {
	public void show();
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class Man implements Person{

	@Override
	public void show() {
		System.out.println(&amp;#34;Man...的show方法执行了。。。。&amp;#34;);
	}
	
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class Woman implements Person{

	@Override
	public void show() {
		System.out.println(&amp;#34;Woman...中的show方法执行了。。。。&amp;#34;);
	}
	
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class MainTest {
	
	public void show(Person person) {
		person.show();
	}
	
	public static void main(String[] args) {
		Person man = new Man();//选择Persion，而不是Man man = new Man();
		Person woman = new Woman();//选择Persion，而不是Woman woman = new Woman();
		
		man.show();
		woman.show();
		
		System.out.println(&amp;#34;-----------------&amp;#34;);
		
		MainTest test = new MainTest();
		test.show(man);
		test.show(woman);
				
		System.out.println(man instanceof Woman);
		System.out.println(man instanceof Person);
		System.out.println(woman instanceof Person);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行结果：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
