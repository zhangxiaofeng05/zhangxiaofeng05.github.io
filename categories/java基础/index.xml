<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JAVA基础 on 风吹过的烟花</title>
    <link>https://zhangxiaofeng05.github.io/categories/java%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in JAVA基础 on 风吹过的烟花</description>
    <image>
      <title>风吹过的烟花</title>
      <url>https://zhangxiaofeng05.github.io/images/papermod-cover.png</url>
      <link>https://zhangxiaofeng05.github.io/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.146.6</generator>
    <language>en</language>
    <lastBuildDate>Sat, 17 Aug 2019 23:20:11 +0800</lastBuildDate>
    <atom:link href="https://zhangxiaofeng05.github.io/categories/java%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>java接口回调</title>
      <link>https://zhangxiaofeng05.github.io/posts/interface-callback/</link>
      <pubDate>Sat, 17 Aug 2019 23:20:11 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/interface-callback/</guid>
      <description>&lt;p&gt;回调一般用于层间协作，上层将本层函数安装在下层，这个函数就是回调，而下层在一定条件下触发回调。例如作为一个驱动，是一个底层，他在收到一个数据时，除了完成本层的处理工作外，还将进行回调，将这个数据交给上层应用层来做进一步处理，这在分层的数据通信中很普遍。&lt;/p&gt;
&lt;p&gt;例如老板A对员工B说，我现在交给你一个任务，并且我把我的电话号码给你，你一旦完成任务就给我打电话。&lt;/p&gt;
&lt;p&gt;1.创建一个回调接口&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/**
 * 一个回调接口
 */
public interface CallBack {
    public void doEvent();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.创建回调接口的实现类，此例中，员工干完活后还要干什么事情是老板说了算的。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/**
 * 回调接口的实现类
 */
public class Boss implements CallBack{

    @Override
    public void doEvent() {
        System.out.println(&amp;#34;打电话给老板，告知已完成工作了&amp;#34;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3.创建控制类，也就是本例中的员工对象，他要持有老板的地址(即回调接口)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/**
 * 控制类，也就是本例中的员工对象，他要持有老板的地址(即回调接口)
 */
public class Employee {
    CallBack callBack;
    public Employee(CallBack callBack){
        this.callBack=callBack;
    }

    public void doWork(){
        System.out.println(&amp;#34;玩命干活中&amp;#34;);
        callBack.doEvent();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4.测试类&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/**
 * 测试类
 */
public class TestMain {
    public static void main(String[] args) {
        Employee employee = new Employee(new Boss());
        employee.doWork();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行结果：&lt;/p&gt;</description>
    </item>
    <item>
      <title>TCP、UDP简单聊天</title>
      <link>https://zhangxiaofeng05.github.io/posts/java-simple-chat/</link>
      <pubDate>Tue, 30 Jul 2019 16:10:55 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/java-simple-chat/</guid>
      <description>&lt;h1 id=&#34;tcp&#34;&gt;TCP&lt;/h1&gt;
&lt;p&gt;客户端套接字：Socket
服务端套接字：ServerSocket
TCP（传输控制协议）一种基于连接的通信协议。可靠传输&lt;/p&gt;
&lt;h2 id=&#34;server&#34;&gt;Server&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package com.tcp;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;

/**
 * 服务器端
 */
public class Server {
    public static void main(String[] args) {
        ServerSocket serverSocket = null;
        try {
            serverSocket = new ServerSocket(12345);
            System.out.println(&amp;#34;服务启动：&amp;#34;+serverSocket.getInetAddress().getHostAddress()+&amp;#34;:&amp;#34;+serverSocket.getLocalPort());
            Socket accept = serverSocket.accept();
            System.out.println(&amp;#34;客户端：&amp;#34;+accept.getInetAddress().getHostAddress()+&amp;#34;:&amp;#34;+accept.getLocalPort());
            BufferedReader sis = new BufferedReader(new InputStreamReader(System.in));
            BufferedReader is = new BufferedReader(new InputStreamReader(accept.getInputStream()));
            PrintWriter os = new PrintWriter(new OutputStreamWriter(accept.getOutputStream()));
            while (true){
                String line;
                if ((line=is.readLine())!=null){
                    System.out.println(&amp;#34;收到客户端：&amp;#34;+line);
                    if (line.equals(&amp;#34;bye&amp;#34;)){
                        break;
                    }else {
                        os.println(sis.readLine());
                        os.flush();
                    }
                }
            }
            is.close();
            os.close();
            accept.close();
        } catch (IOException e) {
            e.printStackTrace();
        }finally {
            try {
                serverSocket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;client&#34;&gt;Client&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package com.tcp;

import java.io.*;
import java.net.Socket;

/**
 * 客户端
 */
public class Client {
    public static void main(String[] args) {
        try {
            Socket socket = new Socket(&amp;#34;127.0.0.1&amp;#34;,12345);
            BufferedReader sis = new BufferedReader(new InputStreamReader(System.in));
            BufferedReader is = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            PrintWriter os = new PrintWriter(new OutputStreamWriter(socket.getOutputStream()));
            String line;
            while (true){
                if ((line=sis.readLine())!=null){
                    if (&amp;#34;bye&amp;#34;.equals(line)){
                        System.exit(0);
                    }
                    os.println(line);
                    os.flush();
                }
                String readLine = is.readLine();
                System.out.println(&amp;#34;收到服务端：&amp;#34;+readLine);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;udp&#34;&gt;UDP&lt;/h1&gt;
&lt;p&gt;UDP采用Datagram（数据报）传输，数据包是一种尽力而为的传送数据的方式，它只是 把数据的目的地记录在数据包中，然后就直接放在网络上，系统不保证数据是否能安全到达，或者什么时候可以送到，它并不保证传送质量。&lt;/p&gt;</description>
    </item>
    <item>
      <title>反射</title>
      <link>https://zhangxiaofeng05.github.io/posts/java-relfect/</link>
      <pubDate>Sun, 28 Jul 2019 21:36:31 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/java-relfect/</guid>
      <description>&lt;h1 id=&#34;javalangclass&#34;&gt;java.lang.Class&lt;T&gt;&lt;/h1&gt;
&lt;p&gt;创建一个类，通过编译(javac.exe),生成对应的.class文件。之后使用java.exe加载(JVM的类加载器完成)，  此.class文件加载到内存以后，就是一个运行时类，存在缓冲区。那么这个运行时类本身就是一个Class的实例!
一个运行时类只加载一次。&lt;/p&gt;
&lt;h2 id=&#34;举例&#34;&gt;举例&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class RelfectTest{
    public static void main(String[] args) throws IllegalAccessException, InstantiationException, NoSuchFieldException, NoSuchMethodException, InvocationTargetException {
        Class&amp;lt;Person&amp;gt; personClass = Person.class;
        //通过反射创建对象
        Person person = personClass.newInstance();
        System.out.println(person);
        //通过反射赋值-------public属性
        Field name = personClass.getField(&amp;#34;name&amp;#34;);
        name.set(person,&amp;#34;土豆&amp;#34;);
        System.out.println(person);
        //通过反射赋值------private或者默认(不写)属性
        Field age = personClass.getDeclaredField(&amp;#34;age&amp;#34;);
        age.setAccessible(true);
        age.set(person,18);
        System.out.println(person);
        //通过反射调用指定方法--没有参数
        Method show = personClass.getMethod(&amp;#34;show&amp;#34;);
        show.invoke(person);
        //通过反射调用指定方法--有参数
        Method say = personClass.getMethod(&amp;#34;say&amp;#34;, String.class);
        say.invoke(person,&amp;#34;welcome&amp;#34;);
    }
}
class Person{
    public String name;
    private int age;

    public Person() {
    }

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    @Override
    public String toString() {
        return name+&amp;#34;----&amp;#34;+age;
    }

    public void show(){
        System.out.println(&amp;#34;Person类的show...&amp;#34;);
    }

    public void say(String word){
        System.out.println(name+&amp;#34; &amp;#34;+word);
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;拓展&#34;&gt;拓展&lt;/h2&gt;
&lt;p&gt;Person类&lt;/p&gt;</description>
    </item>
    <item>
      <title>==和equals和hashCode</title>
      <link>https://zhangxiaofeng05.github.io/posts/equals-hashcode/</link>
      <pubDate>Sun, 28 Jul 2019 14:06:50 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/equals-hashcode/</guid>
      <description>&lt;h1 id=&#34;和equals&#34;&gt;==和equals&lt;/h1&gt;
&lt;h2 id=&#34;heading&#34;&gt;==&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基本类型：比较的是值是否相同；&lt;/li&gt;
&lt;li&gt;引用类型：比较的是内存地址是否相同(是否是同一对象)；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;equals&#34;&gt;equals&lt;/h2&gt;
&lt;p&gt;Object类中的equals方法&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public boolean equals(Object obj) {
    return (this == obj);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;String类重写了equals方法&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public boolean equals(Object anObject) {
    if (this == anObject) {
        return true;
    }
    if (anObject instanceof String) {
        String anotherString = (String)anObject;
        int n = value.length;
        if (n == anotherString.value.length) {
            char v1[] = value;
            char v2[] = anotherString.value;
            int i = 0;
            while (n-- != 0) {
                if (v1[i] != v2[i])
                    return false;
                i++;
            }
            return true;
        }
    }
    return false;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;举例：&lt;/p&gt;</description>
    </item>
    <item>
      <title>java IO流</title>
      <link>https://zhangxiaofeng05.github.io/posts/java-io/</link>
      <pubDate>Thu, 25 Jul 2019 15:38:45 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/java-io/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://zhangxiaofeng05.github.io/mypng/3.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;从控制台输入输出&#34;&gt;从控制台输入输出&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import java.util.Scanner;

public class IoTest {
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        System.out.println(n);

        String s = sc.next();
        System.out.println(s);

        String line = sc.nextLine();
        System.out.println(line);//从控制台输出
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;字节流&#34;&gt;字节流&lt;/h1&gt;
&lt;h2 id=&#34;fileoutputstream&#34;&gt;FileOutputStream&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.OutputStream;

public class IoTest {
    public static void main(String args[]){
        File file = new File(&amp;#34;aa.txt&amp;#34;);
        try {
            //FileOutputStream(File,boolean) 是否把内容追加
            OutputStream out = new FileOutputStream(file);
            String str = &amp;#34;Hello World&amp;#34;;
            byte[] b=str.getBytes();
            out.write(b);
            out.close();

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }catch (Exception e){
            e.printStackTrace();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;fileinputstream&#34;&gt;FileInputStream&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;

public class IoTest {
    public static void main(String args[]){
        try {
            File file = new File(&amp;#34;E:&amp;#34;+File.separator+&amp;#34;tt.txt&amp;#34;);
            InputStream is = new FileInputStream(file);
//            byte[] bytes = new byte[1024];
            //也可以这样
            byte[] bytes = new byte[(int) file.length()];
            is.read(bytes);
            System.out.println(new String(bytes));
            //关闭流
            is.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }catch (Exception e){
            e.printStackTrace();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;bufferedoutputstream&#34;&gt;BufferedOutputStream&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import java.io.*;

public class IoTest {
    public static void main(String args[]){
        File file = new File(&amp;#34;aa.txt&amp;#34;);
        try {
            OutputStream out = new FileOutputStream(file);
            BufferedOutputStream bos = new BufferedOutputStream(out);
            byte[] bytes = &amp;#34;土豆，土豆，呼叫土豆&amp;#34;.getBytes();
            bos.write(bytes);

            //刷新缓存
            bos.flush();

            bos.close();
            out.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }catch (Exception e){
            e.printStackTrace();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;bufferedinputstream&#34;&gt;BufferedInputStream&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import java.io.*;

public class IoTest {
    public static void main(String args[]){
        try {
            File file = new File(&amp;#34;E:&amp;#34;+File.separator+&amp;#34;tt.txt&amp;#34;);
            InputStream is = new FileInputStream(file);
            BufferedInputStream bis = new BufferedInputStream(is);
            byte[] bytes = new byte[(int) file.length()];
            bis.read(bytes);

            System.out.println(new String(bytes));

            bis.close();
            is.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }catch (Exception e){
            e.printStackTrace();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;字符流&#34;&gt;字符流&lt;/h1&gt;
&lt;h2 id=&#34;filewriter&#34;&gt;FileWriter&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;

public class IoTest {
    public static void main(String args[]){
        try {
            File file = new File(&amp;#34;aa.txt&amp;#34;);
            Writer writer = new FileWriter(file);
            writer.write(&amp;#34;土豆。。。\n&amp;#34;);
            writer.write(&amp;#34;地瓜，对不起&amp;#34;);

            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;filereader&#34;&gt;FileReader&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;

public class IoTest {
    public static void main(String args[]){
        try {
            File file = new File(&amp;#34;aa.txt&amp;#34;);
            Reader reader = new FileReader(file);
            char[] chars = new char[1024];
            reader.read(chars);
            System.out.println(new String(chars));

            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;转换流字节流转字符流&#34;&gt;转换流(字节流转字符流)&lt;/h1&gt;
&lt;h2 id=&#34;outputstreamwriter&#34;&gt;OutputStreamWriter&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import java.io.*;

public class IoTest {
    public static void main(String args[]){
        File file = new File(&amp;#34;aa.txt&amp;#34;);
        try {
            OutputStream out = new FileOutputStream(file);
            OutputStreamWriter osw = new OutputStreamWriter(out);
            osw.write(&amp;#34;这是字节流转成了字符流&amp;#34;);
            String encoding = osw.getEncoding();
            System.out.println(&amp;#34;文件的编码：&amp;#34;+encoding); //文件的编码：UTF8
            osw.close();
            out.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }catch (Exception e){
            e.printStackTrace();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;inputstreamreader&#34;&gt;InputStreamReader&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import java.io.*;

public class IoTest {
    public static void main(String args[]){
        try {
            File file = new File(&amp;#34;aa.txt&amp;#34;);
            InputStream is = new FileInputStream(file);
            InputStreamReader isr = new InputStreamReader(is,&amp;#34;utf-8&amp;#34;);//指定编码
            char[] chars = new char[1024];
            isr.read(chars);
            System.out.println(chars);

            System.out.println(&amp;#34;编码：&amp;#34;+isr.getEncoding());

            isr.close();
            isr.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }catch (Exception e){
            e.printStackTrace();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;字符缓冲流高效流&#34;&gt;字符缓冲流(高效流)&lt;/h1&gt;
&lt;h2 id=&#34;bufferedwriter&#34;&gt;BufferedWriter&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import java.io.*;

public class IoTest {
    public static void main(String args[]){
        File file = new File(&amp;#34;aa.txt&amp;#34;);
        try {
            OutputStream out = new FileOutputStream(file);
            OutputStreamWriter osw = new OutputStreamWriter(out);
            BufferedWriter bw = new BufferedWriter(osw);
            bw.write(&amp;#34;hello 这是字符缓冲流&amp;#34;);
            bw.newLine();
            bw.write(&amp;#34;下一行&amp;#34;);

            bw.close();
            osw.close();
            out.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }catch (Exception e){
            e.printStackTrace();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;bufferedreader&#34;&gt;BufferedReader&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import java.io.*;

public class IoTest {
    public static void main(String args[]){
        try {
            File file = new File(&amp;#34;aa.txt&amp;#34;);
            InputStream is = new FileInputStream(file);
            InputStreamReader isr = new InputStreamReader(is,&amp;#34;utf-8&amp;#34;);
            BufferedReader br = new BufferedReader(isr);
            String str;

            while ((str=br.readLine())!=null){
                System.out.println(str);
            }

            br.close();
            isr.close();
            is.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }catch (Exception e){
            e.printStackTrace();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;字节流与字符流的区别&#34;&gt;字节流与字符流的区别&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;字节流在操作的时候本身是不会用到缓冲区（内存）的，是与文件本身直接操作的，而字符流在操作的时候是使用到缓冲区的&lt;/p&gt;</description>
    </item>
    <item>
      <title>java异常</title>
      <link>https://zhangxiaofeng05.github.io/posts/java-exception/</link>
      <pubDate>Thu, 25 Jul 2019 14:34:21 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/java-exception/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://zhangxiaofeng05.github.io/mypng/2.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;异常类型&#34;&gt;异常类型&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;检查性异常
最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。&lt;/li&gt;
&lt;li&gt;运行时异常
运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略(Throw)。&lt;/li&gt;
&lt;li&gt;错误
错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;异常类exception&#34;&gt;异常类Exception&lt;/h1&gt;
&lt;h2 id=&#34;构造方法&#34;&gt;构造方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;public Exception()&lt;br&gt;
构建一个新的异常，以 null作为其详细信息。&lt;/li&gt;
&lt;li&gt;public Exception(String message)&lt;br&gt;
使用指定的详细消息构造新的异常。&lt;/li&gt;
&lt;li&gt;public Exception(String message, Throwable cause)&lt;br&gt;
构造一个新的异常与指定的详细信息和原因。&lt;/li&gt;
&lt;li&gt;public Exception(Throwable cause)&lt;br&gt;
构造一个新的异常与指定原因。&lt;/li&gt;
&lt;li&gt;protected Exception(String message, Throwable cause,boolean enableSuppression,boolean writableStackTrace)&lt;br&gt;
构造一个新的异常，其中包含指定的详细消息，启用或禁用抑制功能，启用或禁用可写栈跟踪。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常用方法&#34;&gt;常用方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;public String getMessage()&lt;br&gt;
返回关于发生的异常的详细信息。这个消息在Throwable 类的构造函数中初始化了。&lt;/li&gt;
&lt;li&gt;public Throwable getCause()&lt;br&gt;
返回一个Throwable 对象代表异常原因。&lt;/li&gt;
&lt;li&gt;public String toString()&lt;br&gt;
使用getMessage()的结果返回类的串级名字。&lt;/li&gt;
&lt;li&gt;public void &lt;strong&gt;printStackTrace&lt;/strong&gt;()&lt;br&gt;
打印toString()结果和栈层次到System.err，即错误输出流。&lt;/li&gt;
&lt;li&gt;public StackTraceElement [] getStackTrace()&lt;br&gt;
返回一个包含堆栈层次的数组。下标为0的元素代表栈顶，最后一个元素代表方法调用堆栈的栈底。&lt;/li&gt;
&lt;li&gt;public Throwable fillInStackTrace()&lt;br&gt;
用当前的调用栈层次填充Throwable 对象栈层次，添加到栈层次任何先前信息中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;处理异常&#34;&gt;处理异常&lt;/h1&gt;
&lt;h2 id=&#34;try-catch&#34;&gt;try-catch&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class MyException extends Exception{
    public static void main(String[] args) {
        try {
            int i=1/0;
        }catch (ArithmeticException e){
            e.printStackTrace();
        }
        catch (Exception e){
            e.printStackTrace();
            System.out.println(&amp;#34;这是总异常&amp;#34;);
        }finally {
            System.out.println(&amp;#34;无论有没有异常，都会执行。比如用于关闭数据库的连接&amp;#34;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;throws&#34;&gt;throws&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class MyException extends Exception{
    public static void main(String[] args) {
        MyException myException = new MyException();
        try {
            myException.show();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void show() throws Exception{//抛出去，谁调用谁处理
        int i=1/0;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;注意事项&#34;&gt;注意事项&lt;/h2&gt;
&lt;p&gt;throws在方法名后边
catch 不能独立于 try 存在。
在 try/catch 后面添加 finally 块并非强制性要求的。
try 代码后不能既没 catch 块也没 finally 块。
try, catch, finally 块之间不能添加任何代码。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java中Date、SimpleDateFormat、Calendar</title>
      <link>https://zhangxiaofeng05.github.io/posts/java-date-calender/</link>
      <pubDate>Wed, 24 Jul 2019 17:14:47 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/java-date-calender/</guid>
      <description>&lt;h2 id=&#34;jdk18&#34;&gt;jdk1.8&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

/**
 * Java 语言的Date(日期)，Calendar(日历)，DateFormat(日期格式)组成了Java标准的一个基本但是非常重要的部分。
 */
public class StringTest {
    public static void main(String[] args) throws ParseException {
        Date currentTime = new Date();
        System.out.println(currentTime);
        //设置时间格式
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&amp;#34;yyyy-MM-dd HH:mm:ss&amp;#34;);
        System.out.println(simpleDateFormat.format(currentTime));

        SimpleDateFormat year = new SimpleDateFormat(&amp;#34;yyyy&amp;#34;);//获取年----其它类似
        System.out.println(year.format(currentTime));

        Date date = simpleDateFormat.parse(&amp;#34;2019-1-23 12:00:00&amp;#34;);//把字符串转换成日期
        System.out.println(simpleDateFormat.format(date));

        //计算时间差currentTime-date相差多少天
        Long days = (currentTime.getTime()-date.getTime())/(1000*60*60*24);//参数--毫秒
        System.out.println(days);

        System.out.println(&amp;#34;---------------------------利用Calendar获取时间值比较方便&amp;#34;);
//        Calendar转化为Date
        Calendar cal=Calendar.getInstance();
        Date date1=cal.getTime();

//        Date转化为Calendar
        Calendar cal2=Calendar.getInstance();
        cal2.setTime(date);
        //计算某个日期是那一年的第几天
        int d = cal2.get(Calendar.DAY_OF_YEAR);
        System.out.println(d);

        //一年的第几周等。。

    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>String、StringBuffer、StringBuilder的区别</title>
      <link>https://zhangxiaofeng05.github.io/posts/string-stringbuffer-stringbuilder/</link>
      <pubDate>Wed, 24 Jul 2019 15:38:18 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/string-stringbuffer-stringbuilder/</guid>
      <description>&lt;h2 id=&#34;长度是否可变&#34;&gt;长度是否可变&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;String 是被 final 修饰的，他的长度是不可变的，就算调用 String 的concat 方法，那也是把字符串拼接起来并重新创建一个对象，把拼接后的 String 的值赋给新创建的对象&lt;/li&gt;
&lt;li&gt;StringBuffer 和 StringBuilder修改本身&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;执行效率&#34;&gt;执行效率&lt;/h2&gt;
&lt;p&gt;三者在执行速度方面的比较：StringBuilder &amp;gt; StringBuffer &amp;gt; String&lt;/p&gt;
&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果要操作少量的数据用 = String&lt;/li&gt;
&lt;li&gt;单线程操作字符串缓冲区 下操作大量数据 = StringBuilder&lt;/li&gt;
&lt;li&gt;多线程操作字符串缓冲区 下操作大量数据 = StringBuffer&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;线程安全&#34;&gt;线程安全&lt;/h2&gt;
&lt;p&gt;StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问），StringBuffer是线程安全的。只是StringBuffer 中的方法大都采用了 &lt;code&gt;synchronized&lt;/code&gt; 关键字进行修饰，因此是线程安全的，而 StringBuilder 没有这个修饰，可以被认为是线程不安全的。&lt;/p&gt;
&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/AmyZheng/p/9415064.html&#34;&gt;https://www.cnblogs.com/AmyZheng/p/9415064.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java中的线程</title>
      <link>https://zhangxiaofeng05.github.io/posts/java-thread/</link>
      <pubDate>Wed, 24 Jul 2019 11:40:48 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/java-thread/</guid>
      <description>&lt;h1 id=&#34;进程和线程概念&#34;&gt;进程和线程概念&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;进程&lt;/code&gt;(Process)是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。进程是线程的容器。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;线程&lt;/code&gt;(thread)是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一个进程中可以并发多个线程，每条线程并行执行不同的任务。&lt;/p&gt;
&lt;p&gt;同一进程中的多条线程将共享该进程中的全部系统资源，如虚拟地址空间，文件描述符和信号处理等等。但同一进程中的多个线程有各自的调用栈（call stack），自己的寄存器环境（register context），自己的线程本地存储（thread-local storage）。
一个进程可以有很多线程，每条线程并行执行不同的任务。&lt;/p&gt;
&lt;h1 id=&#34;线程&#34;&gt;线程&lt;/h1&gt;
&lt;p&gt;在 Java程序中，有两种方法创建线程：
一继承Thread重写run方法
二是通过实现Runnable接口，实现run方法&lt;/p&gt;
&lt;p&gt;线程总体分两类：用户线程和守候线程。
当所有用户线程执行完毕的时候，JVM自动关闭。但是守候线程却不独立于JVM，守候线程一般是由操作系统或者用户自己创建的。&lt;/p&gt;
&lt;h2 id=&#34;继承thread&#34;&gt;继承Thread&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class ThreadOne extends Thread{

    private String name;

    public ThreadOne() {
    }

    public ThreadOne(String name) {
        this.name = name;
    }

    @Override
    public void run() {
        for(int i=1;i&amp;lt;=10;i++){
            System.out.println(name+&amp;#34;----&amp;#34;+i);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class ThreadTest {

    public static void main(String[] args) {
        ThreadOne threadOne1 = new ThreadOne(&amp;#34;地瓜&amp;#34;);
        ThreadOne threadOne2 = new ThreadOne(&amp;#34;土豆&amp;#34;);
        threadOne1.start();
        threadOne2.start();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;实现runnable接口&#34;&gt;实现Runnable接口&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class ThreadTwo implements Runnable {

    private String name;

    public ThreadTwo() {
    }

    public ThreadTwo(String name) {
        this.name = name;
    }

    @Override
    public void run() {
        for(int i=1;i&amp;lt;=10;i++){
            System.out.println(name+&amp;#34;-------&amp;#34;+i);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class ThreadTest {

    public static void main(String[] args) {
        Thread t1 = new Thread(new ThreadTwo(&amp;#34;地瓜&amp;#34;));
        Thread t2 = new Thread(new ThreadTwo(&amp;#34;土豆&amp;#34;));
        t1.start();
        t2.start();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;线程的转换&#34;&gt;线程的转换&lt;/h1&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://zhangxiaofeng05.github.io/mypng/1.png&#34;&gt;
新建状态：线程对象已经创建
就绪状态：执行了start
运行状态：线程调度程序从可运行池中选择一个线程作为当前线程时线程所处的状态。这也是线程进入运行状态的唯一一种方式。
阻塞：线程仍旧是活的，但是当前没有条件运行。
死亡态：当线程的run()方法完成时就认为它死去。这个线程对象也许是活的，但是，它已经不是一个单独执行的线程。线程一旦死亡，就不能复生。如果在一个死去的线程上调用start()方法，会抛出java.lang.IllegalThreadStateException异常。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Object类</title>
      <link>https://zhangxiaofeng05.github.io/posts/object/</link>
      <pubDate>Thu, 18 Jul 2019 13:42:14 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/object/</guid>
      <description>&lt;h1 id=&#34;特点&#34;&gt;特点&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;是Java中唯一一个没有父类的类&lt;/li&gt;
&lt;li&gt;java中所有的类不是object类的直接子类，就是其间接子类&lt;/li&gt;
&lt;li&gt;定义在object类中的所有方法，在任何类中都可以直接调用，而不需要声明object类的对象。&lt;/li&gt;
&lt;li&gt;是java中所有类的超类（基类 ，父类）&lt;/li&gt;
&lt;li&gt;object类中只有无参构造&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;方法&#34;&gt;方法&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;常用方法&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;public boolean equals（object obj）&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public boolean equals(Object obj) {
        return (this == obj);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;指示其他某个对象是否与此对象“相等”。
(ps:==判断是否引用地址相同)
2. public String tostring（)&lt;br&gt;
返回对象的字符串表示形式。
3. public int hashCode()&lt;br&gt;
返回此对象的一个哈希码值。&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;不常用方法&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;protected Object clone()&lt;br&gt;
创建并返回此对象的一个副本。&lt;/li&gt;
&lt;li&gt;protected void finalize()&lt;br&gt;
当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。子类重写 finalize 方法，以配置系统资源或执行其他清除。&lt;/li&gt;
&lt;li&gt;public final Class&lt;?&gt; getClass()&lt;br&gt;
返回此 Object 的运行时类。&lt;/li&gt;
&lt;li&gt;public final void notify()&lt;br&gt;
唤醒在此对象监视器上等待的单个线程。&lt;/li&gt;
&lt;li&gt;public final void notifyAll()&lt;br&gt;
唤醒在此对象监视器上等待的所有线程。&lt;/li&gt;
&lt;li&gt;public final void wait()&lt;br&gt;
在其他线程调用此对象的 notify() 方法或 notifyAll() 方法前，导致当前线程等待。&lt;/li&gt;
&lt;li&gt;public final void wait(long timeout)&lt;br&gt;
在其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者超过指定的时间量前，导致当前线程等待。&lt;/li&gt;
&lt;li&gt;public final void wait(long timeout,int nanos)&lt;br&gt;
在其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者其他某个线程中断当前线程，或者已超过某个实际时间量前，导致当前线程等待。&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    <item>
      <title>安装jdk</title>
      <link>https://zhangxiaofeng05.github.io/posts/install-jdk/</link>
      <pubDate>Thu, 23 Aug 2018 14:10:41 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/install-jdk/</guid>
      <description>&lt;h1 id=&#34;linux&#34;&gt;Linux&lt;/h1&gt;
&lt;h2 id=&#34;下载&#34;&gt;下载&lt;/h2&gt;
&lt;p&gt;官网：https://www.oracle.com/technetwork/java/javase/downloads/index.html&lt;/p&gt;
&lt;h2 id=&#34;配置环境&#34;&gt;配置环境&lt;/h2&gt;
&lt;p&gt;解压到/opt&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo tar -zxf jdk-8u211-linux-x64.tar.gz -C /opt/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改/etc/profile文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo vi /etc/profile
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把下面的添加到文件的末尾&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;export JAVA_HOME=/opt/jdk1.8.0_211
export JRE_HOME=/opt/jdk1.8.0_211/jre
export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH
export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使修改后的文件生效&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; /etc/profile
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;windows&#34;&gt;Windows&lt;/h1&gt;
&lt;h2 id=&#34;下载-1&#34;&gt;下载&lt;/h2&gt;
&lt;p&gt;官网：http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;我选择默认安装&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Program Files\Java\jdk1.8.0_211
C:\Program Files\Java\jre1.8.0_211
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;配置环境-1&#34;&gt;配置环境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新建系统变量JAVA_HOME&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;变量名：JAVA_HOME
变量值：C:\Program Files\Java\jdk1.8.0_211
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;新建系统变量CLASSPATH&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;变量名：CLASSPATH
变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;在系统变量Path中添加&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;%JAVA_HOME%\bin
%JAVA_HOME%\jre\bin
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;测试是否成功&#34;&gt;测试是否成功&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;java -version
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;java
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;javac
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
