<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Spring Boot on 风吹过的烟花</title>
    <link>https://zhangxiaofeng05.github.io/categories/spring-boot/</link>
    <description>Recent content in Spring Boot on 风吹过的烟花</description>
    <image>
      <title>风吹过的烟花</title>
      <url>https://zhangxiaofeng05.github.io/images/papermod-cover.png</url>
      <link>https://zhangxiaofeng05.github.io/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.146.6</generator>
    <language>en</language>
    <lastBuildDate>Sat, 20 Jul 2019 14:32:00 +0800</lastBuildDate>
    <atom:link href="https://zhangxiaofeng05.github.io/categories/spring-boot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring Boot打印日志</title>
      <link>https://zhangxiaofeng05.github.io/posts/spring-boot-logback/</link>
      <pubDate>Sat, 20 Jul 2019 14:32:00 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/spring-boot-logback/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文环境
jdk 1.8
maven 3.6.1
Spring Boot 2.1.6&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;slf4j&#34;&gt;SLF4J&lt;/h1&gt;
&lt;h2 id=&#34;为什么要介绍slf4j&#34;&gt;为什么要介绍SLF4J？&lt;/h2&gt;
&lt;p&gt;SLF4J是一个接口，log4j和logback是它的实现。
SLF4J官网：https://www.slf4j.org&lt;/p&gt;
&lt;h2 id=&#34;官网示例&#34;&gt;官网示例&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;引入jar包
slf4j-api-1.7.26.jar
slf4j-simple-1.7.26.jar&lt;/li&gt;
&lt;li&gt;编写测试类(Java Project)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HelloWorld {
  public static void main(String[] args) {
    Logger logger = LoggerFactory.getLogger(HelloWorld.class);
    logger.info(&amp;#34;Hello World&amp;#34;);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有什么问题，去官网查看示例！&lt;/p&gt;
&lt;h1 id=&#34;spring-boot中使用日志logback&#34;&gt;Spring Boot中使用日志(logback)&lt;/h1&gt;
&lt;h2 id=&#34;编写测试类&#34;&gt;编写测试类&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest
public class LogbackTest {
	//记录器
	Logger logger = LoggerFactory.getLogger(getClass());
	
	@Test
	public void logTest() {
		//日志的级别
		//从上到下---由低到高
		//日志会在设置的级别和高级别生效，Spring Boot默认info
		logger.trace(&amp;#34;这是trace日志...&amp;#34;);
		logger.debug(&amp;#34;这是debug日志...&amp;#34;);
		//可以在logback-spring.xml或者在application.xml配置日志级别
		logger.info(&amp;#34;这是info日志...&amp;#34;);
		logger.warn(&amp;#34;这是warn日志...&amp;#34;);
		logger.error(&amp;#34;这是error日志...&amp;#34;);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;设置日志的格式&#34;&gt;设置日志的格式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;resources/logback-spring.xml&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;
&amp;lt;configuration debug=&amp;#34;false&amp;#34; scan=&amp;#34;true&amp;#34; scanPeriod=&amp;#34;60 seconds&amp;#34;&amp;gt;
   
	&amp;lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径 --&amp;gt;
	&amp;lt;!-- 
	&amp;lt;property name=&amp;#34;LOG_PATH&amp;#34; value=&amp;#34;/data/log/process/springboot-demo&amp;#34; /&amp;gt;
	 --&amp;gt;
	&amp;lt;springProperty name=&amp;#34;LOG_PATH&amp;#34; source=&amp;#34;logging.path&amp;#34;  defaultValue=&amp;#34;../logs&amp;#34; /&amp;gt;
	&amp;lt;!-- 控制台输出 --&amp;gt;
	&amp;lt;appender name=&amp;#34;STDOUT&amp;#34; class=&amp;#34;ch.qos.logback.core.ConsoleAppender&amp;#34;&amp;gt;
		&amp;lt;encoder class=&amp;#34;ch.qos.logback.classic.encoder.PatternLayoutEncoder&amp;#34;&amp;gt;
			&amp;lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 --&amp;gt;
			&amp;lt;pattern&amp;gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n&amp;lt;/pattern&amp;gt;
		&amp;lt;/encoder&amp;gt;
	&amp;lt;/appender&amp;gt;
	
	&amp;lt;!-- 按照每天生成日志文件 --&amp;gt;
	&amp;lt;appender name=&amp;#34;FILE&amp;#34; class=&amp;#34;ch.qos.logback.core.rolling.RollingFileAppender&amp;#34;&amp;gt;
		&amp;lt;rollingPolicy class=&amp;#34;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&amp;#34;&amp;gt;
			&amp;lt;!--日志文件输出的文件名 --&amp;gt;
			&amp;lt;FileNamePattern&amp;gt;${LOG_PATH}/log.log.%d{yyyy-MM-dd}&amp;lt;/FileNamePattern&amp;gt;
			&amp;lt;!--日志文件保留天数 --&amp;gt;
			&amp;lt;!-- &amp;lt;MaxHistory&amp;gt;30&amp;lt;/MaxHistory&amp;gt; --&amp;gt;
		&amp;lt;/rollingPolicy&amp;gt;
		&amp;lt;encoder class=&amp;#34;ch.qos.logback.classic.encoder.PatternLayoutEncoder&amp;#34;&amp;gt;
			&amp;lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 --&amp;gt;
			&amp;lt;pattern&amp;gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n&amp;lt;/pattern&amp;gt;
		&amp;lt;/encoder&amp;gt;
	&amp;lt;/appender&amp;gt;

	&amp;lt;!-- 日志输出级别 --&amp;gt;
	&amp;lt;root level=&amp;#34;INFO&amp;#34;&amp;gt;
		&amp;lt;appender-ref ref=&amp;#34;FILE&amp;#34; /&amp;gt;
		&amp;lt;appender-ref ref=&amp;#34;STDOUT&amp;#34; /&amp;gt;
	&amp;lt;/root&amp;gt;
&amp;lt;/configuration&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;配置文件的加载顺序&#34;&gt;配置文件的加载顺序&lt;/h2&gt;
&lt;p&gt;application.properties或者application.yml文件作为Spring Boot的默认配置文件&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring Boot发送邮件</title>
      <link>https://zhangxiaofeng05.github.io/posts/spring-boot-mail/</link>
      <pubDate>Fri, 19 Jul 2019 14:59:20 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/spring-boot-mail/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文环境
jdk 1.8
maven 3.6.1
Spring Boot 2.1.6&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;引入依赖&#34;&gt;引入依赖&lt;/h1&gt;
&lt;p&gt;pom.xml&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
	&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;spring-boot-starter-mail&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;在applicationproperties中添加邮件配置以qq邮箱为例&#34;&gt;在application.properties中添加邮件配置(以QQ邮箱为例)&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;spring.mail.host=smtp.qq.com
spring.mail.port=587
spring.mail.username=xxx@qq.com
spring.mail.password=授权码
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.default-encoding=UTF-8


mail.fromMail.addr=xxx@qq.com #发送来源，和账户相同
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;QQ邮箱的服务器端口&lt;br&gt;
接收邮件服务器：imap.qq.com，使用SSL，端口号993&lt;br&gt;
发送邮件服务器：smtp.qq.com，使用SSL，端口号465或587&lt;br&gt;
&lt;a href=&#34;https://service.mail.qq.com/cgi-bin/help?subtype=1&amp;amp;&amp;amp;id=28&amp;amp;&amp;amp;no=331&#34;&gt;QQ邮箱帮助中心&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;编写service接口&#34;&gt;编写Service接口&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public interface MailService {
	public void sendSimpleMail(String to,String subject,String content);
	
	public void sendHtmlMail(String to, String subject, String content);
	
	public void sendAttachmentsMail(String to, String subject, String content, String filePath);
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;编写service的实现类&#34;&gt;编写Service的实现类&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import java.io.File;

import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.FileSystemResource;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Component;


@Component
public class MailServiceImpl implements MailService{
	
	private final Logger logger =  LoggerFactory.getLogger(this.getClass());
	
	@Autowired
	private JavaMailSender mailSender;
	
	@Value(&amp;#34;${mail.fromMail.addr}&amp;#34;)
	private String from;

	@Override
	public void sendSimpleMail(String to, String subject, String content) {
		SimpleMailMessage message = new SimpleMailMessage();
		message.setFrom(from);
		message.setTo(to);
		message.setSubject(subject);
		message.setText(content);
		
		try {
			mailSender.send(message);
			logger.info(&amp;#34;简单邮件已经发送&amp;#34;);
		} catch (Exception e) {
			logger.error(&amp;#34;发送简单邮件时发生异常!&amp;#34;,e);
		}
	}
	
	@Override
	public void sendHtmlMail(String to, String subject, String content) {
		MimeMessage message = mailSender.createMimeMessage();

	    try {
	        //true表示需要创建一个multipart message
	        MimeMessageHelper helper = new MimeMessageHelper(message, true);
	        helper.setFrom(from);
	        helper.setTo(to);
	        helper.setSubject(subject);
	        helper.setText(content, true);

	        mailSender.send(message);
	        logger.info(&amp;#34;html邮件发送成功&amp;#34;);
	    } catch (MessagingException e) {
	        logger.error(&amp;#34;发送html邮件时发生异常！&amp;#34;, e);
	    }
	}
	
	@Override
	public void sendAttachmentsMail(String to, String subject, String content, String filePath) {
		MimeMessage message = mailSender.createMimeMessage();
		try {
	        MimeMessageHelper helper = new MimeMessageHelper(message, true);
	        helper.setFrom(from);
	        helper.setTo(to);
	        helper.setSubject(subject);
	        helper.setText(content, true);

	        FileSystemResource file = new FileSystemResource(new File(filePath));
	        String fileName = filePath.substring(filePath.lastIndexOf(File.separator));
	        helper.addAttachment(fileName, file);

	        mailSender.send(message);
	        logger.info(&amp;#34;带附件的邮件已经发送。&amp;#34;);
	    } catch (MessagingException e) {
	        logger.error(&amp;#34;发送带附件的邮件时发生异常！&amp;#34;, e);
	    }
	}

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;编写测试类&#34;&gt;编写测试类&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import com.boot.service.MailService;
@RunWith(SpringRunner.class)
@SpringBootTest
public class MailTest {
	
	@Autowired
	private MailService mailService;
	
	@Test
	public void testSimple() {
		mailService.sendSimpleMail(&amp;#34;xxx@163.com&amp;#34;, &amp;#34;test simple mail&amp;#34;, &amp;#34;hello this is simple mail&amp;#34;);
	}
	
	@Test
	public void testHtmlMail() throws Exception {
	    String content=&amp;#34;&amp;lt;html&amp;gt;\n&amp;#34; +
	            &amp;#34;&amp;lt;body&amp;gt;\n&amp;#34; +
	            &amp;#34;    &amp;lt;h3&amp;gt;hello world ! 这是一封Html邮件!&amp;lt;/h3&amp;gt;\n&amp;#34; +
	            &amp;#34;&amp;lt;/body&amp;gt;\n&amp;#34; +
	            &amp;#34;&amp;lt;/html&amp;gt;&amp;#34;;
	    mailService.sendHtmlMail(&amp;#34;xxx@163.com&amp;#34;,&amp;#34;test simple mail&amp;#34;,content);
	}
	
	@Test
	public void sendAttachmentsMail() {
	    String filePath=&amp;#34;D:\\testMail.txt&amp;#34;;
	    mailService.sendAttachmentsMail(&amp;#34;xxx@163.com&amp;#34;, &amp;#34;主题：带附件的邮件&amp;#34;, &amp;#34;有附件，请查收！&amp;#34;, filePath);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;至此，邮件发送成功!&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
