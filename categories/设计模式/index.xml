<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>设计模式 - Category - 风吹过的烟花</title>
        <link>https://zhangxiaofeng05.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
        <description>设计模式 - Category - 风吹过的烟花</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>zhangxiaofeng05@foxmail.com (zhangxiaofeng05)</managingEditor>
            <webMaster>zhangxiaofeng05@foxmail.com (zhangxiaofeng05)</webMaster><lastBuildDate>Fri, 30 Aug 2019 07:15:38 &#43;0800</lastBuildDate><atom:link href="https://zhangxiaofeng05.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" rel="self" type="application/rss+xml" /><item>
    <title>行为型模式-备忘录模式</title>
    <link>https://zhangxiaofeng05.github.io/memento-pattern/</link>
    <pubDate>Fri, 30 Aug 2019 07:15:38 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://zhangxiaofeng05.github.io/memento-pattern/</guid>
    <description><![CDATA[百度百科 备忘录模式 备忘录模式是一种软件设计模式：在不破坏封闭的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对]]></description>
</item>
<item>
    <title>行为型模式-解释器模式</title>
    <link>https://zhangxiaofeng05.github.io/interpreter-pattern/</link>
    <pubDate>Thu, 29 Aug 2019 22:45:54 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://zhangxiaofeng05.github.io/interpreter-pattern/</guid>
    <description><![CDATA[百度百科 Interpreter模式 Interpreter(解释器)模式是一种特殊的设计模式，它建立一个解释器（Interpreter），对于]]></description>
</item>
<item>
    <title>结构型模式-组合模式</title>
    <link>https://zhangxiaofeng05.github.io/composite-pattern/</link>
    <pubDate>Thu, 29 Aug 2019 22:04:46 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://zhangxiaofeng05.github.io/composite-pattern/</guid>
    <description><![CDATA[百度百科 组合模式 组合模式，将对象组合成树形结构以表示“部分-整体”的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性。掌握组合]]></description>
</item>
<item>
    <title>行为型模式-访问者模式</title>
    <link>https://zhangxiaofeng05.github.io/visitor-pattern/</link>
    <pubDate>Thu, 29 Aug 2019 10:33:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://zhangxiaofeng05.github.io/visitor-pattern/</guid>
    <description><![CDATA[维基百科 访问者模式 访问者模式是一种将算法与对象结构分离的软件设计模式。 这个模式的基本想法如下：首先我们拥有一个由许多对象构成的对象结构，这些]]></description>
</item>
<item>
    <title>行为型模式-模板方法</title>
    <link>https://zhangxiaofeng05.github.io/template-method-pattern/</link>
    <pubDate>Thu, 29 Aug 2019 10:13:54 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://zhangxiaofeng05.github.io/template-method-pattern/</guid>
    <description><![CDATA[维基百科 模板方法 模板方法模型是一种行为设计模型。模板方法是一个定义在父类别的方法，在模板方法中会呼叫多个定义在父类别的其他方法，而这些方法有]]></description>
</item>
<item>
    <title>行为型模式-策略模式</title>
    <link>https://zhangxiaofeng05.github.io/strategy-pattern/</link>
    <pubDate>Thu, 29 Aug 2019 06:55:54 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://zhangxiaofeng05.github.io/strategy-pattern/</guid>
    <description><![CDATA[维基百科 策略模式 策略模式作为一种软件设计模式，指对象有某个行为，但是在不同的场景中，该行为有不同的实现算法。比如每个人都要“交个人所得税”，]]></description>
</item>
<item>
    <title>行为型模式-状态模式</title>
    <link>https://zhangxiaofeng05.github.io/state-pattern/</link>
    <pubDate>Thu, 29 Aug 2019 06:30:46 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://zhangxiaofeng05.github.io/state-pattern/</guid>
    <description><![CDATA[百度百科 状态模式 (State Pattern)是设计模式的一种，属于行为模式。 允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类 定义]]></description>
</item>
<item>
    <title>行为型模式-观察者模式</title>
    <link>https://zhangxiaofeng05.github.io/observer-pattern/</link>
    <pubDate>Tue, 27 Aug 2019 08:55:07 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://zhangxiaofeng05.github.io/observer-pattern/</guid>
    <description><![CDATA[维基百科 观察者模式 观察者模式是软件设计模式的一种。在此种模式中，一个目标对象管理所有相依于它的观察者对象，并且在它本身的状态改变时主动发出通]]></description>
</item>
<item>
    <title>行为型模式-中介者模式</title>
    <link>https://zhangxiaofeng05.github.io/mediator-pattern/</link>
    <pubDate>Mon, 26 Aug 2019 23:28:40 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://zhangxiaofeng05.github.io/mediator-pattern/</guid>
    <description><![CDATA[维基百科 中介者模式 在软件工程领域，中介者模式定义了一个中介者对象，该对象封装了系统中对象间的交互方式。 由于它可以在运行时改变程序的行为，这种]]></description>
</item>
<item>
    <title>行为型模式-迭代器模式</title>
    <link>https://zhangxiaofeng05.github.io/iterator-pattern/</link>
    <pubDate>Mon, 26 Aug 2019 15:47:11 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://zhangxiaofeng05.github.io/iterator-pattern/</guid>
    <description><![CDATA[维基百科 迭代器模式 在 面向对象编程里，迭代器模式是一种设计模式，是一种最简单也最常见的设计模式。它可以让用户透过特定的接口巡访容器中的每一个元]]></description>
</item>
</channel>
</rss>
