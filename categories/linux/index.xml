<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux on 风吹过的烟花</title>
    <link>https://zhangxiaofeng05.github.io/categories/linux/</link>
    <description>Recent content in Linux on 风吹过的烟花</description>
    <image>
      <title>风吹过的烟花</title>
      <url>https://zhangxiaofeng05.github.io/images/papermod-cover.png</url>
      <link>https://zhangxiaofeng05.github.io/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.146.6</generator>
    <language>en</language>
    <lastBuildDate>Sun, 10 Jan 2021 21:27:41 +0800</lastBuildDate>
    <atom:link href="https://zhangxiaofeng05.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Aliyun用nginx配置https</title>
      <link>https://zhangxiaofeng05.github.io/posts/aliyun_nginx_https/</link>
      <pubDate>Sun, 10 Jan 2021 21:27:41 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/aliyun_nginx_https/</guid>
      <description>&lt;h3 id=&#34;首先在阿里云购买域名申请域名证书可以免费申请一年&#34;&gt;首先在阿里云购买域名，申请域名证书，可以免费申请一年&lt;/h3&gt;
&lt;h3 id=&#34;nginx配置https过程&#34;&gt;nginx配置https过程&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://yq.aliyun.com/articles/672835&#34;&gt;https://yq.aliyun.com/articles/672835&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;示例&#34;&gt;示例&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;server {
    listen      444 ssl;
    server_name zhangxiaofeng.top localhost;

    # ssl证书地址
    ssl_certificate     /etc/nginx/cert/4879361_zhangxiaofeng.top.pem;  # pem文件的路径
    ssl_certificate_key  /etc/nginx/cert/4879361_zhangxiaofeng.top.key; # key文件的路径
    
    # ssl验证相关配置
    ssl_session_timeout  5m;    #缓存有效期
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;    #加密算法
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    #安全链接可选的加密协议
    ssl_prefer_server_ciphers on;   #使用服务器端的首选算法


    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache&amp;#39;s document root
    # concurs with nginx&amp;#39;s one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;访问：  &lt;del&gt;&lt;a href=&#34;https://zhangxiaofeng.top:444&#34;&gt;https://zhangxiaofeng.top:444&lt;/a&gt;&lt;/del&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>deepin编译安装Python3.6</title>
      <link>https://zhangxiaofeng05.github.io/posts/deepin-install-python3/</link>
      <pubDate>Sat, 18 Jan 2020 01:16:31 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/deepin-install-python3/</guid>
      <description>&lt;h2 id=&#34;官网下载源码&#34;&gt;官网下载源码&lt;/h2&gt;
&lt;p&gt;官网：https://www.python.org/downloads/source/&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd /opt/python/
sudo wget https://www.python.org/ftp/python/3.6.10/Python-3.6.10.tar.xz
sudo xz -d Python-3.6.10.tar.xz
sudo tar xvf Python-3.6.10.tar
cd Python-3.6.10/
sudo ./configure --prefix=/usr/local/python3.6
sudo make
sudo make install
sudo ln -s /usr/local/python3.6/bin/python3 /usr/bin/python3.6
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;虚拟环境&#34;&gt;虚拟环境&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python3.6 -m venv ./env           #创建虚拟环境

source env/bin/activate           #激活虚拟环境
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;python官方文档&#34;&gt;python官方文档&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.python.org/zh-cn/3/library/venv.html&#34;&gt;https://docs.python.org/zh-cn/3/library/venv.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>deepin安装使用Oh My Zsh</title>
      <link>https://zhangxiaofeng05.github.io/posts/deepin-install-ohmyzsh/</link>
      <pubDate>Fri, 10 Jan 2020 00:27:17 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/deepin-install-ohmyzsh/</guid>
      <description>&lt;h2 id=&#34;安装oh-my-zsh&#34;&gt;安装Oh My Zsh&lt;/h2&gt;
&lt;p&gt;github地址：https://github.com/ohmyzsh/ohmyzsh&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt install zsh
sh -c &amp;#34;$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34;

# 将 Zsh 设置为默认 Shell
chsh -s /bin/zsh
#  查看当前所用的 Shell
echo $SHELL
# 查看系统内已安装的 Shell
cat /etc/shells
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ps:root执行此脚本只能root使用Oh My Zsh，其他用户使用需要在那个用户下执行此安装脚本
&lt;img alt=&#34;8&#34; loading=&#34;lazy&#34; src=&#34;https://zhangxiaofeng05.github.io/mypng/8.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;更换主题&#34;&gt;更换主题&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vi ~/.zshrc

#ZSH_THEME=&amp;#34;robbyrussell&amp;#34;
ZSH_THEME=&amp;#34;agnoster&amp;#34;
#ZSH_THEME=&amp;#34;amuse&amp;#34;
#ZSH_THEME=&amp;#34;fishy&amp;#34;
#ZSH_THEME=&amp;#34;ys&amp;#34;

source ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;agnoster主题箭头无法正常显示&#34;&gt;agnoster主题箭头无法正常显示&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;检查是否安装PowerlineSymbols字体&lt;br&gt;
如果没有安装,官方安装文档https://powerline.readthedocs.io/en/latest/installation.html&lt;/li&gt;
&lt;li&gt;在终端选择能够正常显示箭头的字体&lt;br&gt;
PowerlineSymbols,DejaVu Sans Mono&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;安装字体参考： &lt;a href=&#34;https://github.com/powerline/fonts&#34;&gt;https://github.com/powerline/fonts&lt;/a&gt;&lt;br&gt;
比如： &lt;code&gt;sudo apt-get install fonts-powerline&lt;/code&gt;，以GitHub为准。&lt;/p&gt;
&lt;p&gt;deepin 15.11为例,系统已经装好字体了,但是没有正常显示箭头,在终端尝试哪个字体能够正常显示.
&lt;img alt=&#34;9&#34; loading=&#34;lazy&#34; src=&#34;https://zhangxiaofeng05.github.io/mypng/9.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>命令行下测试服务器外网速度speedtest-cli</title>
      <link>https://zhangxiaofeng05.github.io/posts/speedtest-cli/</link>
      <pubDate>Tue, 07 Jan 2020 23:49:29 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/speedtest-cli/</guid>
      <description>&lt;h2 id=&#34;speedtest-cli命令&#34;&gt;speedtest-cli命令&lt;/h2&gt;
&lt;p&gt;speedtest-cli是一个使用python编写的命令行脚本，通过调用speedtest.net测试上下行的接口来完成速度测试&lt;br&gt;
linux命令大全：https://man.linuxde.net/speedtest-cli&lt;br&gt;
github地址：https://github.com/sivel/speedtest-cli&lt;/p&gt;
&lt;h2 id=&#34;使用方式&#34;&gt;使用方式&lt;/h2&gt;
&lt;p&gt;自己看作者的&lt;code&gt;README.md&lt;/code&gt;&lt;br&gt;
此处列一个简单的方法&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wget -O speedtest-cli https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py
chmod +x speedtest-cli
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;命令&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./speedtest-cli -h               打印帮助信息
./speedtest-cli --share          测速
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Lrzsz用于小文件的上传下载</title>
      <link>https://zhangxiaofeng05.github.io/posts/lrzsz/</link>
      <pubDate>Tue, 07 Jan 2020 00:05:37 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/lrzsz/</guid>
      <description>&lt;h2 id=&#34;百度百科&#34;&gt;百度百科&lt;/h2&gt;
&lt;p&gt;lrzsz是一款在linux里可代替ftp上传和下载的程序。&lt;/p&gt;
&lt;h2 id=&#34;使用方法&#34;&gt;使用方法&lt;/h2&gt;
&lt;p&gt;centos服务器，可直接&lt;code&gt;yum -y install lrzsz&lt;/code&gt; 程序会自动安装好，然后如你要下载则sz [找到你要下载的文件] 如果你要上传，则rz 浏览找到你本机要上传的文件。需要注意的事这个命令无法在putty界面使用哦！&lt;/p&gt;
&lt;h2 id=&#34;注意&#34;&gt;注意&lt;/h2&gt;
&lt;p&gt;deepin-terminal：使用命令出现乱码，需要用鼠标右击终端然后点击上传文件、下载文件。&lt;/p&gt;</description>
    </item>
    <item>
      <title>linux安装并配置nginx</title>
      <link>https://zhangxiaofeng05.github.io/posts/linux-nginx/</link>
      <pubDate>Sun, 05 Jan 2020 21:25:56 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/linux-nginx/</guid>
      <description>&lt;h2 id=&#34;维基百科&#34;&gt;维基百科&lt;/h2&gt;
&lt;p&gt;Nginx是异步框架的网页服务器，也可以用作反向代理、负载平衡器和HTTP缓存。&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;官网：https://www.nginx.com/&lt;br&gt;
官网安装文档：http://nginx.org/en/docs/install.html&lt;br&gt;
安装完成：http://127.0.0.1/&lt;/p&gt;
&lt;h2 id=&#34;管理命令&#34;&gt;管理命令&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;systemctl restart nginx.service    重启
systemctl status nginx.service     查看运行状态
systemctl start nginx.service      启动
systemctl stop nginx.service       关闭

systemctl enable nginx.service     开机自启
systemctl disable nginx.service    关闭开机自启
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;默认配置文件&#34;&gt;默认配置文件&lt;/h2&gt;
&lt;p&gt;以CentOS/7.3.1611、 nginx/1.12.2为例：&lt;br&gt;
默认配置：&lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

#user nginx;
user root;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    log_format  main  &amp;#39;$remote_addr - $remote_user [$time_local] &amp;#34;$request&amp;#34; &amp;#39;
                      &amp;#39;$status $body_bytes_sent &amp;#34;$http_referer&amp;#34; &amp;#39;
                      &amp;#39;&amp;#34;$http_user_agent&amp;#34; &amp;#34;$http_x_forwarded_for&amp;#34;&amp;#39;;

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    include             /etc/nginx/mime.types;
    default_type        application/octet-streamo;


    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

    server {
        listen       80 default_server;
        listen       [::]:80 default_server;
        server_name  _;
        root         /usr/share/nginx/html;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

    autoindex on;
        autoindex_exact_size off;
        autoindex_localtime on;

        location / {
        }

        error_page 404 /404.html;
            location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    }

# Settings for a TLS enabled server.
#
#    server {
#        listen       443 ssl http2 default_server;
#        listen       [::]:443 ssl http2 default_server;
#        server_name  _;
#        root         /usr/share/nginx/html;
#
#        ssl_certificate &amp;#34;/etc/pki/nginx/server.crt&amp;#34;;
#        ssl_certificate_key &amp;#34;/etc/pki/nginx/private/server.key&amp;#34;;
#        ssl_session_cache shared:SSL:1m;
#        ssl_session_timeout  10m;
#        ssl_ciphers HIGH:!aNULL:!MD5;
#        ssl_prefer_server_ciphers on;
#
#        # Load configuration files for the default server block.
#        include /etc/nginx/default.d/*.conf;
#
#        location / {
#        }
#
#        error_page 404 /404.html;
#            location = /40x.html {
#        }
#
#        error_page 500 502 503 504 /50x.html;
#            location = /50x.html {
#        }
#    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;自己新加的conf可以放在&lt;code&gt;cd /etc/nginx/conf.d&lt;/code&gt;目录下&lt;/p&gt;</description>
    </item>
    <item>
      <title>linux使用v2ray作为客户端</title>
      <link>https://zhangxiaofeng05.github.io/posts/linux-v2ray-client/</link>
      <pubDate>Sat, 04 Jan 2020 16:22:37 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/linux-v2ray-client/</guid>
      <description>&lt;h2 id=&#34;安装v2ray&#34;&gt;安装v2ray&lt;/h2&gt;
&lt;p&gt;官网：https://www.v2ray.com/  (&lt;code&gt;被墙&lt;/code&gt;,如果可以，&lt;code&gt;不明白的多看官网&lt;/code&gt;)&lt;br&gt;
github地址：https://github.com/v2ray/v2ray-core&lt;br&gt;
&lt;code&gt;在root用户环境下运行&lt;/code&gt;&lt;br&gt;
yum 或 apt-get 安装v2ray&lt;br&gt;
或者执行安装脚本&lt;code&gt;bash &amp;lt;(curl -L -s https://install.direct/go.sh)&lt;/code&gt;&lt;br&gt;
此脚本会自动安装以下文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/usr/bin/v2ray/v2ray：V2Ray 程序；&lt;/li&gt;
&lt;li&gt;/usr/bin/v2ray/v2ctl：V2Ray 工具；&lt;/li&gt;
&lt;li&gt;/etc/v2ray/config.json：配置文件；&lt;/li&gt;
&lt;li&gt;/usr/bin/v2ray/geoip.dat：IP 数据文件&lt;/li&gt;
&lt;li&gt;/usr/bin/v2ray/geosite.dat：域名数据文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此脚本会配置自动运行脚本。自动运行脚本会在系统重启之后，自动运行 V2Ray。&lt;/p&gt;
&lt;p&gt;脚本运行完成后，你需要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编辑 /etc/v2ray/config.json 文件来配置你需要的代理方式；&lt;br&gt;
config.json&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{
        &amp;#34;inbound&amp;#34;: {
            &amp;#34;port&amp;#34;: 1080,
            &amp;#34;protocol&amp;#34;: &amp;#34;socks&amp;#34;,
            &amp;#34;domainOverride&amp;#34;: [&amp;#34;tls&amp;#34;,&amp;#34;http&amp;#34;],
            &amp;#34;settings&amp;#34;: {
            &amp;#34;auth&amp;#34;: &amp;#34;noauth&amp;#34;
            }
        },
        &amp;#34;outbound&amp;#34;: {
            &amp;#34;protocol&amp;#34;: &amp;#34;vmess&amp;#34;,
            &amp;#34;settings&amp;#34;: {
            &amp;#34;vnext&amp;#34;: [
                {
                &amp;#34;address&amp;#34;: &amp;#34;216.244.76.219&amp;#34;,
                &amp;#34;port&amp;#34;: 54321, 
                &amp;#34;users&amp;#34;: [
                    {
                    &amp;#34;id&amp;#34;: &amp;#34;3cf35a68-ea46-11e9-9cab-003048d37a3c&amp;#34;,
                    &amp;#34;alterId&amp;#34;: 64,
                    &amp;#34;security&amp;#34;: &amp;#34;aes-128-gcm&amp;#34;
                    }
                ]
                }
            ]
            },
        &amp;#34;streamSettings&amp;#34;: {
        &amp;#34;network&amp;#34;: &amp;#34;tcp&amp;#34;,
        &amp;#34;security&amp;#34;: &amp;#34;aes-128-gcm&amp;#34;
        }

        }
}
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;运行 &lt;code&gt;service v2ray start&lt;/code&gt; 来启动 V2Ray 进程；&lt;/li&gt;
&lt;li&gt;之后可以使用 service v2ray start|stop|status|reload|restart|force-reload 控制 V2Ray 的运行。&lt;br&gt;
或者使用&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;systemctl status v2ray.service
systemctl start v2ray.service
systemctl stop v2ray.service
systemctl restart v2ray.service
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;图形客户端推荐支持订阅&#34;&gt;图形客户端(推荐:支持订阅)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows&lt;br&gt;
v2rayN(第三方): &lt;a href=&#34;https://github.com/2dust/v2rayN/releases/latest&#34;&gt;https://github.com/2dust/v2rayN/releases/latest&lt;/a&gt;&lt;br&gt;
下载v2rayN-Core.zip&lt;/li&gt;
&lt;li&gt;Linux
Qv2ray(第三方): &lt;a href=&#34;https://github.com/lhy0403/Qv2ray/releases&#34;&gt;https://github.com/lhy0403/Qv2ray/releases&lt;/a&gt;
下载Qv2ray.v2.4.1.linux-x64.AppImage,添加权限&lt;code&gt;chmod 755 Qv2ray.v2.4.1.linux-x64.AppImage&lt;/code&gt;,双击便可执行&lt;br&gt;
具体配置参考文章:https://linger.ink/2020/linux-qv2ray-usage&lt;/li&gt;
&lt;li&gt;Mac
v2rayX(第三方): &lt;a href=&#34;https://github.com/insisttech/v2rayX-copy/releases&#34;&gt;https://github.com/insisttech/v2rayX-copy/releases&lt;/a&gt;&lt;br&gt;
v2rayU(第三方): &lt;a href=&#34;https://github.com/yanue/V2rayU/releases&#34;&gt;https://github.com/yanue/V2rayU/releases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ps:由于是第三方依赖v2ray,需要指定下载的v2ray的路径,v2ray:https://github.com/v2ray/v2ray-core/releases ,下载v2ray-linux-64.zip&lt;/p&gt;</description>
    </item>
    <item>
      <title>vim安装插件</title>
      <link>https://zhangxiaofeng05.github.io/posts/vim-plugin/</link>
      <pubDate>Thu, 02 Jan 2020 23:51:51 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/vim-plugin/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;注意：推荐参考：&lt;a href=&#34;https://github.com/zhangxiaofeng05/dotfiles&#34;&gt;https://github.com/zhangxiaofeng05/dotfiles&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;插件管理器vundlevim&#34;&gt;插件管理器(Vundle.vim)&lt;/h2&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;github地址：https://github.com/VundleVim/Vundle.vim  (&lt;code&gt;仔细看README.md&lt;/code&gt;)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;clone&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;修改配置文件&lt;br&gt;
&lt;code&gt;vim ~/.vimrc&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;set nocompatible              &amp;#34; be iMproved, required
filetype off                  &amp;#34; required

&amp;#34; set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
&amp;#34; alternatively, pass a path where Vundle should install plugins
&amp;#34;call vundle#begin(&amp;#39;~/some/path/here&amp;#39;)

&amp;#34; let Vundle manage Vundle, required
Plugin &amp;#39;VundleVim/Vundle.vim&amp;#39;

&amp;#34;plugin------------------------&amp;#34;
“Plugin &amp;#39;插件名&amp;#39;  
&amp;#34;看作者的README.md，有示例

&amp;#34;plugin------------------------&amp;#34;

&amp;#34; All of your Plugins must be added before the following line
call vundle#end()            &amp;#34; required
filetype plugin indent on    &amp;#34; required
&amp;#34; To ignore plugin indent changes, instead use:
&amp;#34;filetype plugin on
&amp;#34;
&amp;#34; Brief help
&amp;#34; :PluginList       - lists configured plugins
&amp;#34; :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
&amp;#34; :PluginSearch foo - searches for foo; append `!` to refresh local cache
&amp;#34; :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
&amp;#34;
&amp;#34; see :h vundle for more details or wiki for FAQ
&amp;#34; Put your non-Plugin stuff after this line
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;install-plugins&#34;&gt;Install Plugins&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Launch &lt;code&gt;vim&lt;/code&gt; and run &lt;code&gt;:PluginInstall&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To install from command line: &lt;code&gt;vim +PluginInstall +qall&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装nerdtree&#34;&gt;安装NERDTree&lt;/h2&gt;
&lt;h3 id=&#34;安装此插件需要安装插件管理器&#34;&gt;安装此插件需要安装插件管理器&lt;/h3&gt;
&lt;p&gt;github地址：https://github.com/preservim/nerdtree  (&lt;code&gt;仔细看README.md&lt;/code&gt;)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker</title>
      <link>https://zhangxiaofeng05.github.io/posts/docker/</link>
      <pubDate>Sun, 08 Dec 2019 22:12:35 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/docker/</guid>
      <description>&lt;h2 id=&#34;维基百科&#34;&gt;维基百科&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/Docker&#34;&gt;https://zh.wikipedia.org/wiki/Docker&lt;/a&gt;&lt;br&gt;
Docker是一个开放源代码软件项目，让应用程序部署在软件货柜下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。&lt;/p&gt;
&lt;h2 id=&#34;docker官网&#34;&gt;docker官网&lt;/h2&gt;
&lt;p&gt;官网：https://www.docker.com/&lt;br&gt;
官网安装指南：https://docs.docker.com/install/&lt;br&gt;
docker安装软件比较简单，很适合学习，避免了linux的各种版本安装软件的繁琐。&lt;/p&gt;
&lt;h2 id=&#34;docker-hub&#34;&gt;Docker Hub&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/&#34;&gt;https://hub.docker.com/&lt;/a&gt;&lt;br&gt;
Docker Hub是一个由Docker公司负责维护的公共注册中心，它包含了超过15,000个可用来下载和构建容器的镜像，并且还提供认证、工作组结构、工作流工具（比如webhooks）、构建触发器以及私有工具（比如私有仓库可用于存储你并不想公开分享的镜像）。&lt;/p&gt;
&lt;h3 id=&#34;举例docker安装mysql&#34;&gt;举例：docker安装MySQL&lt;/h3&gt;
&lt;p&gt;官网安装指南：https://hub.docker.com/_/mysql&lt;br&gt;
举例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker pull mysql:5.7.28
docker run -p 3306:3306 --name mysql5.7 -e MYSQL_ROOT_PASSWORD=password -d mysql:5.7.28
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;具参数查看官网!!!&lt;/p&gt;
&lt;h3 id=&#34;举例docker安装phpmyadmin&#34;&gt;举例：docker安装phpmyadmin&lt;/h3&gt;
&lt;p&gt;官网安装指南：https://hub.docker.com/r/phpmyadmin/phpmyadmin&lt;br&gt;
举例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker pull phpmyadmin/phpmyadmin
docker run --name myadmin -d -e PMA_ARBITRARY=1 -p 6060:80 phpmyadmin/phpmyadmin
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此命令安装，登录任意服务器地址端口，空格为分割&lt;br&gt;
&lt;img alt=&#34;phpmyadmin&#34; loading=&#34;lazy&#34; src=&#34;https://zhangxiaofeng05.github.io/mypng/6.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;pull代理&#34;&gt;pull代理&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;docker pull&lt;/code&gt;命令，下载镜像慢，设置代理&lt;/p&gt;
&lt;h3 id=&#34;mac&#34;&gt;mac&lt;/h3&gt;
&lt;p&gt;Dashboard -&amp;gt; Settings -&amp;gt; Resources -&amp;gt; Proxies&lt;br&gt;
即可使用http代理&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Web Server(HTTP)
http://127.0.0.1:1081

Secure Web Server(HTTPS)
http://127.0.0.1:1081
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>解决vim粘贴错乱问题</title>
      <link>https://zhangxiaofeng05.github.io/posts/vim_paste/</link>
      <pubDate>Thu, 28 Nov 2019 22:58:59 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/vim_paste/</guid>
      <description>&lt;p&gt;vim打开文件后&lt;br&gt;
1、在视图模式下输入&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;:set paste
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、按i进入编辑模式&lt;br&gt;
3、粘贴((win)Ctrl+v | Shift+Insert(linux))&lt;br&gt;
4、关闭粘贴&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;:set nopaste
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>vim基础配置</title>
      <link>https://zhangxiaofeng05.github.io/posts/vim-basic-configuration/</link>
      <pubDate>Sat, 25 Aug 2018 19:07:11 +0800</pubDate>
      <guid>https://zhangxiaofeng05.github.io/posts/vim-basic-configuration/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;注意：推荐参考：&lt;a href=&#34;https://github.com/zhangxiaofeng05/dotfiles&#34;&gt;https://github.com/zhangxiaofeng05/dotfiles&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;我的配置&#34;&gt;我的配置&lt;/h2&gt;
&lt;p&gt;系统的vim的配置文件在&lt;br&gt;
&lt;code&gt;/etc/vim/vimrc&lt;/code&gt;&lt;br&gt;
当前用户的vim配置文件&lt;br&gt;
&lt;code&gt;~/.vimrc&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#34; --------------zhangxiaofeng----------------
&amp;#34; 显示行号 或者 set number
set nu
&amp;#34; 语法高亮,自动识别代码,使用多种颜色显示
syntax on
&amp;#34; 不与vi兼容,采用vim自己的操作命令
set nocompatible
&amp;#34; 不支持鼠标,如果想支持把-去掉
set mouse-=a
&amp;#34; 使用utf-8编码
set encoding=utf-8
&amp;#34; 高亮度搜寻
set hlsearch
&amp;#34; 输入搜索模式时，每输入一个字符，就自动跳到第一个匹配的结果
set incsearch
&amp;#34; 设置主题
&amp;#34; colorscheme molokai
colorscheme desert
 
&amp;#34; 高亮显示当前行/列
set cursorline                                                                                                                          
set cursorcolumn
&amp;#34; 修改行/列线的外观
&amp;#34; highlight CursorLine   cterm=NONE ctermbg=black ctermfg=green guibg=NONE guifg=NONE
highlight CursorColumn cterm=NONE ctermbg=black ctermfg=green guibg=NONE guifg=NONE
&amp;#34; 按下回车键后，下一行的缩进会自动跟上一行的缩进保持一致
set autoindent
&amp;#34; 按下 Tab 键时，Vim 显示的空格数
set tabstop=4
&amp;#34; 在文本上按下&amp;gt;&amp;gt; &amp;lt;&amp;lt;等缩进,每一级的字符数
set shiftwidth=4
&amp;#34; 光标遇到括号,自动高亮对应的括号
set showmatch
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
