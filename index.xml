<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome</title>
    <link>https://lionng.github.io/</link>
    <description>Recent content on Welcome</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 10 Jan 2021 21:27:41 +0800</lastBuildDate><atom:link href="https://lionng.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Aliyun用nginx配置https</title>
      <link>https://lionng.github.io/post/aliyun_nginx_https/</link>
      <pubDate>Sun, 10 Jan 2021 21:27:41 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/aliyun_nginx_https/</guid>
      <description>首先在阿里云购买域名，申请域名证书，可以免费申请一年 nginx配置https过程 https://yq.aliyun.com/articles/672835 示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27</description>
    </item>
    
    <item>
      <title>配置git代理</title>
      <link>https://lionng.github.io/post/git-proxy/</link>
      <pubDate>Mon, 01 Jun 2020 21:01:18 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/git-proxy/</guid>
      <description>访问GitHub慢，下载慢的解决办法。 ssh-socket代理 创建config文件 1 2 vi ~/.ssh/config # 当然你也可以手动在 C:\Users\Username\.ssh 下创建 config 文件 文件写入如下内容</description>
    </item>
    
    <item>
      <title>Nextcloud云盘</title>
      <link>https://lionng.github.io/post/nextcloud/</link>
      <pubDate>Sat, 04 Apr 2020 18:06:00 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/nextcloud/</guid>
      <description>维基百科 Nextcloud Nextcloud是一套用于创建网络硬盘的客户端－服务器软件。其功能与Dropbox相近，但Nextcloud是自由及开放源代码软</description>
    </item>
    
    <item>
      <title>deepin编译安装Python3.6</title>
      <link>https://lionng.github.io/post/deepin-install-python3.6/</link>
      <pubDate>Sat, 18 Jan 2020 01:16:31 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/deepin-install-python3.6/</guid>
      <description>官网下载源码 官网：https://www.python.org/downloads/source/ 1 2 3 4 5 6 7 8 9 cd /opt/python/ sudo wget https://www.python.org/ftp/python/3.6.10/Python-3.6.10.tar.xz sudo xz -d Python-3.6.10.tar.xz sudo tar xvf</description>
    </item>
    
    <item>
      <title>deepin安装使用Oh My Zsh</title>
      <link>https://lionng.github.io/post/deepin-install-ohmyzsh/</link>
      <pubDate>Fri, 10 Jan 2020 00:27:17 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/deepin-install-ohmyzsh/</guid>
      <description>安装Oh My Zsh github地址：https://github.com/ohmyzsh/ohmyzsh 1 2 3 4 5 6 7 8 9 sudo apt install zsh sh -c &amp;#34;$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34; # 将 Zsh</description>
    </item>
    
    <item>
      <title>命令行下测试服务器外网速度speedtest-cli</title>
      <link>https://lionng.github.io/post/speedtest-cli/</link>
      <pubDate>Tue, 07 Jan 2020 23:49:29 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/speedtest-cli/</guid>
      <description>speedtest-cli命令 speedtest-cli是一个使用python编写的命令行脚本，通过调用speedtest.net测试上下行</description>
    </item>
    
    <item>
      <title>Lrzsz用于小文件的上传下载</title>
      <link>https://lionng.github.io/post/lrzsz/</link>
      <pubDate>Tue, 07 Jan 2020 00:05:37 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/lrzsz/</guid>
      <description>百度百科 lrzsz是一款在linux里可代替ftp上传和下载的程序。 使用方法 centos服务器，可直接yum -y install lrzsz 程序会自动安装好，然后如你</description>
    </item>
    
    <item>
      <title>linux安装并配置nginx</title>
      <link>https://lionng.github.io/post/linux-nginx/</link>
      <pubDate>Sun, 05 Jan 2020 21:25:56 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/linux-nginx/</guid>
      <description>维基百科 Nginx是异步框架的网页服务器，也可以用作反向代理、负载平衡器和HTTP缓存。 安装 官网：https://www.nginx.com</description>
    </item>
    
    <item>
      <title>SimpleHTTPServerWithUpload</title>
      <link>https://lionng.github.io/post/simplehttpserverwithupload/</link>
      <pubDate>Sat, 04 Jan 2020 19:47:00 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/simplehttpserverwithupload/</guid>
      <description>简介 SimpleHTTPServerWithUpload.py是简单的上传下载的脚本 python2 github地址 https://gist.github.com/UniIsland/3346170 使用方法 方法一 1 2 python SimpleHTTPServerWithUpload.py 8050 8050为端</description>
    </item>
    
    <item>
      <title>linux使用v2ray作为客户端</title>
      <link>https://lionng.github.io/post/linux-v2ray-client/</link>
      <pubDate>Sat, 04 Jan 2020 16:22:37 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/linux-v2ray-client/</guid>
      <description>安装v2ray 官网：https://www.v2ray.com/ (被墙,如果可以，不明白的多看官网) github地址：https://git</description>
    </item>
    
    <item>
      <title>vim安装插件</title>
      <link>https://lionng.github.io/post/vim-plugin/</link>
      <pubDate>Thu, 02 Jan 2020 23:51:51 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/vim-plugin/</guid>
      <description>插件管理器(Vundle.vim) 安装 github地址：https://github.com/VundleVim/Vundle.vim (仔细</description>
    </item>
    
    <item>
      <title>linux安装mariadb并配置phpmyadmin</title>
      <link>https://lionng.github.io/post/linux_install_phpmyadmin/</link>
      <pubDate>Sun, 29 Dec 2019 11:14:39 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/linux_install_phpmyadmin/</guid>
      <description>mariadb 维基百科 MariaDB是MySQL关系数据库管理系统的一个复刻，由社区开发，有商业支持，旨在继续保持在GNU GPL下开源。MariaDB的</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://lionng.github.io/post/docker/</link>
      <pubDate>Sun, 08 Dec 2019 22:12:35 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/docker/</guid>
      <description>维基百科 https://zh.wikipedia.org/wiki/Docker Docker是一个开放源代码软件项目，让应用程序部署在软件货柜下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软</description>
    </item>
    
    <item>
      <title>ftp服务器</title>
      <link>https://lionng.github.io/post/ftp-server/</link>
      <pubDate>Sun, 01 Dec 2019 00:09:14 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/ftp-server/</guid>
      <description>linux环境 1 2 3 4 5 LSB Version: :core-4.1-amd64:core-4.1-noarch Distributor ID: CentOS Description: CentOS Linux release 7.3.1611 (Core) Release: 7.3.1611 Codename: Core 安装 1 2 3 4 5 6 yum install vsftpd systemctl restart vsftpd.service # 重启vsftpd systemctl stop vsftpd.service # 停止vsftpd systemctl start vsftpd.service # 启动v</description>
    </item>
    
    <item>
      <title>解决vim粘贴错乱问题</title>
      <link>https://lionng.github.io/post/vim_paste/</link>
      <pubDate>Thu, 28 Nov 2019 22:58:59 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/vim_paste/</guid>
      <description>vim打开文件后 1、在视图模式下输入 1 :set paste 2、按i进入编辑模式 3、粘贴((win)Ctrl+v | Shift+Insert(linux)) 4、关闭粘贴 1 :set nopaste</description>
    </item>
    
    <item>
      <title>hugo搭建博客，部署到GitHub</title>
      <link>https://lionng.github.io/post/hugo_blog/</link>
      <pubDate>Mon, 21 Oct 2019 23:37:48 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/hugo_blog/</guid>
      <description>hugo站点 hugo官网：https://gohugo.io/ 安装和使用，先参考官网 安装：使用命令或者从GitHub下载 https://github.com/gohugoio/hugo 检查安装：$ hugo version 生</description>
    </item>
    
    <item>
      <title>小工具</title>
      <link>https://lionng.github.io/lion/</link>
      <pubDate>Thu, 10 Oct 2019 23:46:29 +0800</pubDate>
      
      <guid>https://lionng.github.io/lion/</guid>
      <description>工具 Linux命令大全 https://man.linuxde.net/ git-tips git技巧: https://github.com/jaywcjlove/git-tips you-get 下载媒体内容: https://github.com/soimort/you-get gitignore git忽略文件的编写: https://github.com/github/gitignore 内网穿透,端口转发工具 https://ngrok.com/ https://localtunnel.github.io/www/ 谷歌插件 Chrome插件英雄榜</description>
    </item>
    
    <item>
      <title>about</title>
      <link>https://lionng.github.io/about/</link>
      <pubDate>Fri, 27 Sep 2019 22:48:59 +0800</pubDate>
      
      <guid>https://lionng.github.io/about/</guid>
      <description>联系我 CSDN QQ Email 喜欢的书 鸟哥的linux私房菜: 以centos为基础的linux基础书籍</description>
    </item>
    
    <item>
      <title>行为型模式-备忘录模式</title>
      <link>https://lionng.github.io/post/memento-pattern/</link>
      <pubDate>Fri, 30 Aug 2019 07:15:38 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/memento-pattern/</guid>
      <description>百度百科 备忘录模式 备忘录模式是一种软件设计模式：在不破坏封闭的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对</description>
    </item>
    
    <item>
      <title>行为型模式-解释器模式</title>
      <link>https://lionng.github.io/post/interpreter-pattern/</link>
      <pubDate>Thu, 29 Aug 2019 22:45:54 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/interpreter-pattern/</guid>
      <description>百度百科 Interpreter模式 Interpreter(解释器)模式是一种特殊的设计模式，它建立一个解释器（Interpreter），对于</description>
    </item>
    
    <item>
      <title>结构型模式-组合模式</title>
      <link>https://lionng.github.io/post/composite-pattern/</link>
      <pubDate>Thu, 29 Aug 2019 22:04:46 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/composite-pattern/</guid>
      <description>百度百科 组合模式 组合模式，将对象组合成树形结构以表示“部分-整体”的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性。掌握组合</description>
    </item>
    
    <item>
      <title>行为型模式-访问者模式</title>
      <link>https://lionng.github.io/post/visitor-pattern/</link>
      <pubDate>Thu, 29 Aug 2019 10:33:48 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/visitor-pattern/</guid>
      <description>维基百科 访问者模式 访问者模式是一种将算法与对象结构分离的软件设计模式。 这个模式的基本想法如下：首先我们拥有一个由许多对象构成的对象结构，这些</description>
    </item>
    
    <item>
      <title>行为型模式-模板方法</title>
      <link>https://lionng.github.io/post/template-method-pattern/</link>
      <pubDate>Thu, 29 Aug 2019 10:13:54 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/template-method-pattern/</guid>
      <description>维基百科 模板方法 模板方法模型是一种行为设计模型。模板方法是一个定义在父类别的方法，在模板方法中会呼叫多个定义在父类别的其他方法，而这些方法有</description>
    </item>
    
    <item>
      <title>行为型模式-策略模式</title>
      <link>https://lionng.github.io/post/strategy-pattern/</link>
      <pubDate>Thu, 29 Aug 2019 06:55:54 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/strategy-pattern/</guid>
      <description>维基百科 策略模式 策略模式作为一种软件设计模式，指对象有某个行为，但是在不同的场景中，该行为有不同的实现算法。比如每个人都要“交个人所得税”，</description>
    </item>
    
    <item>
      <title>行为型模式-状态模式</title>
      <link>https://lionng.github.io/post/state-pattern/</link>
      <pubDate>Thu, 29 Aug 2019 06:30:46 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/state-pattern/</guid>
      <description>百度百科 状态模式 (State Pattern)是设计模式的一种，属于行为模式。 允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类 定义</description>
    </item>
    
    <item>
      <title>行为型模式-观察者模式</title>
      <link>https://lionng.github.io/post/observer-pattern/</link>
      <pubDate>Tue, 27 Aug 2019 08:55:07 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/observer-pattern/</guid>
      <description>维基百科 观察者模式 观察者模式是软件设计模式的一种。在此种模式中，一个目标对象管理所有相依于它的观察者对象，并且在它本身的状态改变时主动发出通</description>
    </item>
    
    <item>
      <title>行为型模式-中介者模式</title>
      <link>https://lionng.github.io/post/mediator-pattern/</link>
      <pubDate>Mon, 26 Aug 2019 23:28:40 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/mediator-pattern/</guid>
      <description>维基百科 中介者模式 在软件工程领域，中介者模式定义了一个中介者对象，该对象封装了系统中对象间的交互方式。 由于它可以在运行时改变程序的行为，这种</description>
    </item>
    
    <item>
      <title>行为型模式-迭代器模式</title>
      <link>https://lionng.github.io/post/iterator-pattern/</link>
      <pubDate>Mon, 26 Aug 2019 15:47:11 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/iterator-pattern/</guid>
      <description>维基百科 迭代器模式 在 面向对象编程里，迭代器模式是一种设计模式，是一种最简单也最常见的设计模式。它可以让用户透过特定的接口巡访容器中的每一个元</description>
    </item>
    
    <item>
      <title>行为型模式-命令模式</title>
      <link>https://lionng.github.io/post/command-pattern/</link>
      <pubDate>Mon, 26 Aug 2019 11:33:26 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/command-pattern/</guid>
      <description>维基百科 命令模式 在面向对象编程的范畴中，命令模式（英语：Command pattern）是一种设计模式，它尝试以对象来代表实际行动。命令对象可</description>
    </item>
    
    <item>
      <title>行为型模式-责任链模式</title>
      <link>https://lionng.github.io/post/responsibility-chain-pattern/</link>
      <pubDate>Mon, 26 Aug 2019 08:54:49 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/responsibility-chain-pattern/</guid>
      <description>维基百科 责任链模式 责任链模式在面向对象程式设计里是一种软件设计模式，它包含了一些命令对象和一系列的处理对象。每一个处理对象决定它能处理哪些命</description>
    </item>
    
    <item>
      <title>结构型模式-代理模式</title>
      <link>https://lionng.github.io/post/proxy-pattern/</link>
      <pubDate>Sun, 25 Aug 2019 22:46:31 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/proxy-pattern/</guid>
      <description>维基百科 代理模式 代理模式（英语：Proxy Pattern）是程序设计中的一种设计模式。 所谓的代理者是指一个类别可以作为其它东西的接口。代理者</description>
    </item>
    
    <item>
      <title>结构型模式-享元模式</title>
      <link>https://lionng.github.io/post/flyweight-pattern/</link>
      <pubDate>Sun, 25 Aug 2019 10:51:19 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/flyweight-pattern/</guid>
      <description>维基百科 享元模式 享元模式（英语：Flyweight Pattern）是一种软件设计模式。它使用共享物件，用来尽可能减少内存使用量以及分享资讯给</description>
    </item>
    
    <item>
      <title>结构型模式-外观模式</title>
      <link>https://lionng.github.io/post/facade-pattern/</link>
      <pubDate>Sun, 25 Aug 2019 10:20:54 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/facade-pattern/</guid>
      <description>维基百科 外观模式 外观模式（Facade pattern），是软件工程中常用的一种软件设计模式，它为子系统中的一组接口提供一个统一的高层接口，使</description>
    </item>
    
    <item>
      <title>结构型模式-装饰模式</title>
      <link>https://lionng.github.io/post/decorator-pattern/</link>
      <pubDate>Sun, 25 Aug 2019 09:31:07 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/decorator-pattern/</guid>
      <description>维基百科 修饰模式 修饰模式，是面向对象编程领域中，一种动态地往一个类中添加新的行为的设计模式。就功能而言，修饰模式相比生成子类更为灵活，这样可</description>
    </item>
    
    <item>
      <title>结构型模式-桥接模式</title>
      <link>https://lionng.github.io/post/bridge-pattern/</link>
      <pubDate>Sat, 24 Aug 2019 21:46:01 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/bridge-pattern/</guid>
      <description>维基百科 桥接模式 桥接模式是软件设计模式中最复杂的模式之一，它把事物对象和其具体行为、具体特征分离开来，使它们可以各自独立的变化。事物对象仅是</description>
    </item>
    
    <item>
      <title>结构型模式-适配器模式</title>
      <link>https://lionng.github.io/post/adapter-pattern/</link>
      <pubDate>Sat, 24 Aug 2019 21:12:02 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/adapter-pattern/</guid>
      <description>维基百科 适配器模式 在设计模式中，适配器模式（英语：adapter pattern）有时候也称包装样式或者包装(wrapper)。将一个类的接口</description>
    </item>
    
    <item>
      <title>创建型模式-原型模式</title>
      <link>https://lionng.github.io/post/prototype/</link>
      <pubDate>Sat, 24 Aug 2019 18:43:05 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/prototype/</guid>
      <description>维基百科 原型模式 原型模式是创建型模式的一种，其特点在于通过“复制”一个已经存在的实例来返回新的实例,而不是新建实例。被复制的实例就是我们所称</description>
    </item>
    
    <item>
      <title>创建型模式-单例模式</title>
      <link>https://lionng.github.io/post/single-case-pattern/</link>
      <pubDate>Fri, 23 Aug 2019 17:53:58 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/single-case-pattern/</guid>
      <description>维基百科 单例模式 单例模式，也叫单子模式，是一种常用的软件设计模式。在应用这个模式时，单例对象的类必须保证只有一个实例存在。许多时候整个系统只</description>
    </item>
    
    <item>
      <title>创建型模式-建造者模式</title>
      <link>https://lionng.github.io/post/builder-pattern/</link>
      <pubDate>Fri, 23 Aug 2019 16:48:38 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/builder-pattern/</guid>
      <description>维基百科 生成器模式 生成器模式（英：Builder Pattern）是一种设计模式，又名：建造模式，是一种对象构建模式。它可以将复杂对象的建造过</description>
    </item>
    
    <item>
      <title>创建型模式-抽象工厂</title>
      <link>https://lionng.github.io/post/abstract-factory/</link>
      <pubDate>Mon, 19 Aug 2019 16:02:50 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/abstract-factory/</guid>
      <description>维基百科 抽象工厂 抽象工厂模式（英语：Abstract factory pattern）是一种软件开发设计模式。抽象工厂模式提供了一种方式，可以将一组具有同一</description>
    </item>
    
    <item>
      <title>创建型模式-工厂方法</title>
      <link>https://lionng.github.io/post/factory-method/</link>
      <pubDate>Mon, 19 Aug 2019 15:56:21 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/factory-method/</guid>
      <description>维基百科 工厂方法 工厂方法模式（英语：Factory method pattern）是一种实现了“工厂”概念的面向对象设计模式。就像其他创建型模式一样，它也</description>
    </item>
    
    <item>
      <title>java接口回调</title>
      <link>https://lionng.github.io/post/interface-callback/</link>
      <pubDate>Sat, 17 Aug 2019 23:20:11 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/interface-callback/</guid>
      <description>回调一般用于层间协作，上层将本层函数安装在下层，这个函数就是回调，而下层在一定条件下触发回调。例如作为一个驱动，是一个底层，他在收到一个数据</description>
    </item>
    
    <item>
      <title>mysql高级排序</title>
      <link>https://lionng.github.io/post/mysql-sort/</link>
      <pubDate>Sat, 17 Aug 2019 09:31:27 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/mysql-sort/</guid>
      <description>表和数据 1 2 3 4 5 6 7 8 9 10 CREATETABLE`sqltest`(`id`int(11)NOTNULL,`name`varchar(45</description>
    </item>
    
    <item>
      <title>TCP、UDP简单聊天</title>
      <link>https://lionng.github.io/post/java-simple-chat/</link>
      <pubDate>Tue, 30 Jul 2019 16:10:55 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/java-simple-chat/</guid>
      <description>TCP 客户端套接字：Socket 服务端套接字：ServerSocket TCP（传输控制协议）一种基于连接的通信协议。可靠传输 Server 1 2 3 4 5 6 7 8 9</description>
    </item>
    
    <item>
      <title>反射</title>
      <link>https://lionng.github.io/post/java-relfect/</link>
      <pubDate>Sun, 28 Jul 2019 21:36:31 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/java-relfect/</guid>
      <description>java.lang.Class 创建一个类，通过编译(javac.exe),生成对应的.class文件。之后使用java.exe加载(JVM的类加载器完成)， 此.clas</description>
    </item>
    
    <item>
      <title>==和equals和hashCode</title>
      <link>https://lionng.github.io/post/equals-hashcode/</link>
      <pubDate>Sun, 28 Jul 2019 14:06:50 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/equals-hashcode/</guid>
      <description>==和equals == 基本类型：比较的是值是否相同； 引用类型：比较的是内存地址是否相同(是否是同一对象)； equals Object类中的equals方法</description>
    </item>
    
    <item>
      <title>java IO流</title>
      <link>https://lionng.github.io/post/java-io/</link>
      <pubDate>Thu, 25 Jul 2019 15:38:45 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/java-io/</guid>
      <description>从控制台输入输出 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import java.util.Scanner; public class IoTest { public static void main(String args[]){ Scanner sc = new Scanner(System.in); int n = sc.nextInt(); System.out.println(n); String s = sc.next(); System.out.println(s); String line = sc.nextLine(); System.out.printl</description>
    </item>
    
    <item>
      <title>java异常</title>
      <link>https://lionng.github.io/post/java-exception/</link>
      <pubDate>Thu, 25 Jul 2019 14:34:21 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/java-exception/</guid>
      <description>异常类型 检查性异常 最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异</description>
    </item>
    
    <item>
      <title>Java中Date、SimpleDateFormat、Calendar</title>
      <link>https://lionng.github.io/post/java-date-calender/</link>
      <pubDate>Wed, 24 Jul 2019 17:14:47 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/java-date-calender/</guid>
      <description>jdk1.8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.Calendar; import java.util.Date; /** * Java 语言的Date(日期)，Cale</description>
    </item>
    
    <item>
      <title>String、StringBuffer、StringBuilder的区别</title>
      <link>https://lionng.github.io/post/string-stringbuffer-stringbuilder/</link>
      <pubDate>Wed, 24 Jul 2019 15:38:18 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/string-stringbuffer-stringbuilder/</guid>
      <description>长度是否可变 String 是被 final 修饰的，他的长度是不可变的，就算调用 String 的concat 方法，那也是把字符串拼接起来并重新创建一个对象，把拼接后的 String 的值赋给</description>
    </item>
    
    <item>
      <title>Java中的线程</title>
      <link>https://lionng.github.io/post/java-thread/</link>
      <pubDate>Wed, 24 Jul 2019 11:40:48 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/java-thread/</guid>
      <description>进程和线程概念 进程(Process)是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础</description>
    </item>
    
    <item>
      <title>Spring Boot打印日志</title>
      <link>https://lionng.github.io/post/spring-boot-logback/</link>
      <pubDate>Sat, 20 Jul 2019 14:32:00 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/spring-boot-logback/</guid>
      <description>本文环境 jdk 1.8 maven 3.6.1 Spring Boot 2.1.6 SLF4J 为什么要介绍SLF4J？ SLF4J是一个接口，log4j和logback是它的实现。 SLF4J官网：https://</description>
    </item>
    
    <item>
      <title>Spring Boot发送邮件</title>
      <link>https://lionng.github.io/post/spring-boot-mail/</link>
      <pubDate>Fri, 19 Jul 2019 14:59:20 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/spring-boot-mail/</guid>
      <description>本文环境 jdk 1.8 maven 3.6.1 Spring Boot 2.1.6 引入依赖 pom.xml 1 2 3 4 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-mail&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 在application.properties中添加邮件配置(以QQ邮箱为例) 1 2 3 4 5 6 7</description>
    </item>
    
    <item>
      <title>request和Session</title>
      <link>https://lionng.github.io/post/requestandsession/</link>
      <pubDate>Fri, 19 Jul 2019 11:11:47 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/requestandsession/</guid>
      <description>区别 request session 描述 一次请求(访问一个url) 一次对话(可以访问多个url) 作用 获取信息(表单,查询,cookie等信息) 记录变量(跟踪记录访问者动</description>
    </item>
    
    <item>
      <title>Druid数据库连接池</title>
      <link>https://lionng.github.io/post/druid-database-connection-pool/</link>
      <pubDate>Thu, 18 Jul 2019 15:33:15 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/druid-database-connection-pool/</guid>
      <description>阿里巴巴数据库事业部出品，为监控而生的数据库连接池。 托管于GitHub,项目地址 https://github.com/alibaba/druid Druid是一个JDBC组件库，包括数据库连接池、SQL P</description>
    </item>
    
    <item>
      <title>Object类</title>
      <link>https://lionng.github.io/post/object/</link>
      <pubDate>Thu, 18 Jul 2019 13:42:14 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/object/</guid>
      <description>特点 是Java中唯一一个没有父类的类 java中所有的类不是object类的直接子类，就是其间接子类 定义在object类中的所有方法，在任何类</description>
    </item>
    
    <item>
      <title>数据库隔离级别和传播行为</title>
      <link>https://lionng.github.io/post/transaction-spring/</link>
      <pubDate>Thu, 18 Jul 2019 12:56:44 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/transaction-spring/</guid>
      <description>事务五个隔离级别 DEFAULT 使用数据库设置的隔离级别 ( 默认 ) ，由 DBA 默认的设置来决定隔离级别 . READ_UNCOMMITTED 会出现脏读、不可重复读、幻读 ( 隔离级别最低，并发性能高 )</description>
    </item>
    
    <item>
      <title>悲观锁和乐观锁</title>
      <link>https://lionng.github.io/post/pessimistic-lock-and-optimistic-lock/</link>
      <pubDate>Wed, 17 Jul 2019 23:09:21 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/pessimistic-lock-and-optimistic-lock/</guid>
      <description>悲观锁和乐观锁：处理的是同一张表的同一行记录 悲观锁 如果使用了(加了一个行锁)，如果事务没有被释放，就会造成其他事务处于等待。 使用数据库提供的</description>
    </item>
    
    <item>
      <title>什么是面向接口编程</title>
      <link>https://lionng.github.io/post/interface-oriented-programming/</link>
      <pubDate>Mon, 15 Jul 2019 21:29:10 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/interface-oriented-programming/</guid>
      <description>面向接口编程 要正确地使用Java语言进行面向对象的编程，从而提高程序的复用性，增加程序的可维护性、可扩展性，就必须是面向接口的编程。面向接口</description>
    </item>
    
    <item>
      <title>linux安装QQ</title>
      <link>https://lionng.github.io/post/linux-install-qq/</link>
      <pubDate>Tue, 30 Apr 2019 10:08:24 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/linux-install-qq/</guid>
      <description>首先要感谢deepin,QQ很早就停止linux版的更新了,deepin团队在移植上的力度还是比较大的。以后有机会的话，还会再装deepin</description>
    </item>
    
    <item>
      <title>使用SwitchyOmega</title>
      <link>https://lionng.github.io/post/use-switchyomega/</link>
      <pubDate>Sun, 28 Apr 2019 17:36:55 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/use-switchyomega/</guid>
      <description>这个插件这是一个工具，常见代理有shadowsocks、Goflyway switchyomega的获取 代码在GitHub上维护:https:</description>
    </item>
    
    <item>
      <title>vim基础配置</title>
      <link>https://lionng.github.io/post/vim-basic-configuration/</link>
      <pubDate>Sat, 25 Aug 2018 19:07:11 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/vim-basic-configuration/</guid>
      <description>我的配置 系统的vim的配置文件在 /etc/vim/vimrc 当前用户的vim配置文件 ~/.vimrc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 &amp;#34; --------------zhangxiaofeng---------------- &amp;#34; 显示行号</description>
    </item>
    
    <item>
      <title>安装jdk</title>
      <link>https://lionng.github.io/post/install-jdk/</link>
      <pubDate>Thu, 23 Aug 2018 14:10:41 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/install-jdk/</guid>
      <description>Linux 下载 官网：https://www.oracle.com/technetwork/java/javase/downloads/index.h</description>
    </item>
    
    <item>
      <title>终端使用socks5代理</title>
      <link>https://lionng.github.io/post/terminal-use-socks5-proxy/</link>
      <pubDate>Thu, 16 Aug 2018 10:07:27 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/terminal-use-socks5-proxy/</guid>
      <description>安装proxychains 简单粗暴的方式： 1 $ sudo apt-get install proxychains 如果想要使用最新版，也可以自己手动编译源码 1 2 3 4 5 6 # 安装 git clone https://github.com/rofl0r/proxychains-ng.git ./configure --prefix=/usr --sysconfdir=/etc make sudo make install sudo make install-config</description>
    </item>
    
  </channel>
</rss>
